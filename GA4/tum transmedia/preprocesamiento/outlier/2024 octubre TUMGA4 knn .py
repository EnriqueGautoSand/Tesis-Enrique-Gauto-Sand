{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"x6Xuz8cqauYb","executionInfo":{"status":"ok","timestamp":1730060369221,"user_tz":180,"elapsed":18886,"user":{"displayName":"Enrique Gauto Sand","userId":"16871957759988522994"}}},"outputs":[],"source":["import numpy as np\n","import tensorflow as tf\n","from tensorflow import keras #desde tensorflow 2 se importa keras,  como paquete integrado de tensorflow\n","import pandas as pd\n","import numpy as np\n","from math import sqrt\n","from numpy import concatenate\n","from matplotlib import pyplot\n","from pandas import read_csv\n","from pandas import DataFrame\n","from pandas import concat\n","from sklearn.preprocessing import MinMaxScaler\n","from sklearn.preprocessing import LabelEncoder\n","from sklearn.metrics import mean_squared_error\n","from keras.models import Sequential\n","from keras.layers import Dense\n","from keras.layers import LSTM, GRU\n","import tensorflow as tf\n","from datetime import datetime\n","from keras.models import Sequential\n","from keras.layers import Dense,Flatten,LSTM,RepeatVector,TimeDistributed\n"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"R_2i5Fw0awOr","executionInfo":{"status":"ok","timestamp":1730060472243,"user_tz":180,"elapsed":30920,"user":{"displayName":"Enrique Gauto Sand","userId":"16871957759988522994"}},"outputId":"ac3c04d5-e110-4493-dec4-097ffdec5280"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["\n","from google.colab import drive\n","\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":29,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":498,"status":"ok","timestamp":1730061556975,"user":{"displayName":"Enrique Gauto Sand","userId":"16871957759988522994"},"user_tz":180},"id":"kpkiNaL_boap","outputId":"eb56cb27-d7d6-4241-e9a3-9e24d7782d81"},"outputs":[{"output_type":"stream","name":"stdout","text":["16124\n","Index(['Fecha', 'Número de vistas de página', 'Usuarios nuevos', 'Usuarios',\n","       'Número de sesiones por usuario', 'Sesiones', 'Argentina',\n","       'Otros Paises', 'mobile', 'desktop', 'tablet',\n","       'Categoría de dispositivo promedio', 'Categoría de dispositivo std',\n","       'Android', 'Windows', 'iOS', 'Macintosh', 'Linux', 'Tizen',\n","       'Windows Phone', 'Sistema operativo (not set)',\n","       'Sistema operativo promedio', 'Sistema operativo std', 'Organic Search',\n","       'Direct', 'Socials', 'Referral',\n","       'Agrupación de canales predeterminada promedio',\n","       'Agrupación de canales predeterminada std'],\n","      dtype='object')\n","0      14 jun 2022\n","1      15 jun 2022\n","2      16 jun 2022\n","3      17 jun 2022\n","4      18 jun 2022\n","          ...     \n","551    28 dic 2023\n","552    29 dic 2023\n","553    30 dic 2023\n","554    31 dic 2023\n","555     1 ene 2024\n","Name: Fecha, Length: 556, dtype: object\n","datetime64[ns]\n","(556, 29)\n","         Fecha  Número de vistas de página  Usuarios nuevos  Usuarios  \\\n","0   2022-06-14                        38.0             23.0      23.0   \n","1   2022-06-15                        35.0             22.0      23.0   \n","2   2022-06-16                        46.0             16.0      21.0   \n","3   2022-06-17                        32.0             10.0      13.0   \n","4   2022-06-18                        15.0              9.0      10.0   \n","..         ...                         ...              ...       ...   \n","551 2023-12-28                        19.0              6.0      14.0   \n","552 2023-12-29                        12.0              2.0       4.0   \n","553 2023-12-30                        23.0              3.0      10.0   \n","554 2023-12-31                        18.0              6.0       8.0   \n","555 2024-01-01                         3.0              0.0       2.0   \n","\n","     Número de sesiones por usuario  Sesiones  Argentina  Otros Paises  \\\n","0                          1.173913      27.0       37.0           1.0   \n","1                          1.043478      24.0       33.0           2.0   \n","2                          1.142857      24.0       41.0           5.0   \n","3                          1.076923      14.0       26.0           6.0   \n","4                          1.000000      10.0       14.0           1.0   \n","..                              ...       ...        ...           ...   \n","551                        1.272727      14.0       15.0           4.0   \n","552                        1.750000       7.0       11.0           1.0   \n","553                        2.125000      17.0       21.0           2.0   \n","554                        1.250000      10.0       14.0           4.0   \n","555                        1.000000       2.0        3.0           0.0   \n","\n","     mobile  desktop  ...  Windows Phone  Sistema operativo (not set)  \\\n","0      30.0      8.0  ...            0.0                          0.0   \n","1      21.0     14.0  ...            0.0                          0.0   \n","2      37.0      9.0  ...            0.0                          0.0   \n","3      20.0     12.0  ...            0.0                          0.0   \n","4       8.0      7.0  ...            0.0                          0.0   \n","..      ...      ...  ...            ...                          ...   \n","551     8.0     11.0  ...            0.0                          0.0   \n","552     6.0      5.0  ...            0.0                          0.0   \n","553    20.0      3.0  ...            0.0                          0.0   \n","554    12.0      6.0  ...            0.0                          0.0   \n","555     2.0      1.0  ...            0.0                          0.0   \n","\n","     Sistema operativo promedio  Sistema operativo std  Organic Search  \\\n","0                      4.222222               9.449018            19.0   \n","1                      3.888889               6.607141             8.0   \n","2                      5.111111              11.129984            11.0   \n","3                      3.555556               6.913933             7.0   \n","4                      1.666667               3.126944             6.0   \n","..                          ...                    ...             ...   \n","551                    2.111111               4.012327            16.0   \n","552                    1.333333               2.538591             5.0   \n","553                    2.555556               6.202349            12.0   \n","554                    2.000000               2.748737            11.0   \n","555                    0.333333               0.666667             NaN   \n","\n","     Direct  Socials  Referral  Agrupación de canales predeterminada promedio  \\\n","0      15.0      3.0       1.0                                           9.50   \n","1      26.0      1.0       0.0                                           8.75   \n","2      22.0     13.0       0.0                                          11.50   \n","3      23.0      2.0       0.0                                           8.00   \n","4       9.0      0.0       0.0                                           3.75   \n","..      ...      ...       ...                                            ...   \n","551     3.0      0.0       0.0                                           4.75   \n","552     7.0      0.0       0.0                                           3.00   \n","553     9.0      0.0       2.0                                           5.75   \n","554     6.0      0.0       1.0                                           4.50   \n","555     NaN      NaN       NaN                                            NaN   \n","\n","     Agrupación de canales predeterminada std  \n","0                                    7.664855  \n","1                                   10.425330  \n","2                                    7.826238  \n","3                                    9.027735  \n","4                                    3.897114  \n","..                                        ...  \n","551                                  6.609652  \n","552                                  3.082207  \n","553                                  4.918079  \n","554                                  4.387482  \n","555                                       NaN  \n","\n","[556 rows x 29 columns]\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-29-cb572ae7cacc>:34: UserWarning: Could not infer format, so each element will be parsed individually, falling back to `dateutil`. To ensure parsing is consistent and as-expected, please specify a format.\n","  dataset[\"Fecha\"]=pd.to_datetime(dataset[\"Fecha\"].replace(mapping_dict, regex=True))#esto porque las fechas como agosto estan ago en español\n"]},{"output_type":"execute_result","data":{"text/plain":["       Fecha  Número de vistas de página  Usuarios nuevos  Usuarios  \\\n","0 2022-06-14                        38.0             23.0      23.0   \n","1 2022-06-15                        35.0             22.0      23.0   \n","2 2022-06-16                        46.0             16.0      21.0   \n","3 2022-06-17                        32.0             10.0      13.0   \n","4 2022-06-18                        15.0              9.0      10.0   \n","\n","   Número de sesiones por usuario  Sesiones  Argentina  Otros Paises  mobile  \\\n","0                        1.173913      27.0       37.0           1.0    30.0   \n","1                        1.043478      24.0       33.0           2.0    21.0   \n","2                        1.142857      24.0       41.0           5.0    37.0   \n","3                        1.076923      14.0       26.0           6.0    20.0   \n","4                        1.000000      10.0       14.0           1.0     8.0   \n","\n","   desktop  ...  Windows Phone  Sistema operativo (not set)  \\\n","0      8.0  ...            0.0                          0.0   \n","1     14.0  ...            0.0                          0.0   \n","2      9.0  ...            0.0                          0.0   \n","3     12.0  ...            0.0                          0.0   \n","4      7.0  ...            0.0                          0.0   \n","\n","   Sistema operativo promedio  Sistema operativo std  Organic Search  Direct  \\\n","0                    4.222222               9.449018            19.0    15.0   \n","1                    3.888889               6.607141             8.0    26.0   \n","2                    5.111111              11.129984            11.0    22.0   \n","3                    3.555556               6.913933             7.0    23.0   \n","4                    1.666667               3.126944             6.0     9.0   \n","\n","   Socials  Referral  Agrupación de canales predeterminada promedio  \\\n","0      3.0       1.0                                           9.50   \n","1      1.0       0.0                                           8.75   \n","2     13.0       0.0                                          11.50   \n","3      2.0       0.0                                           8.00   \n","4      0.0       0.0                                           3.75   \n","\n","   Agrupación de canales predeterminada std  \n","0                                  7.664855  \n","1                                 10.425330  \n","2                                  7.826238  \n","3                                  9.027735  \n","4                                  3.897114  \n","\n","[5 rows x 29 columns]"],"text/html":["\n","  <div id=\"df-f6cd082d-d5f6-49cc-b1de-050e57a65276\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Fecha</th>\n","      <th>Número de vistas de página</th>\n","      <th>Usuarios nuevos</th>\n","      <th>Usuarios</th>\n","      <th>Número de sesiones por usuario</th>\n","      <th>Sesiones</th>\n","      <th>Argentina</th>\n","      <th>Otros Paises</th>\n","      <th>mobile</th>\n","      <th>desktop</th>\n","      <th>...</th>\n","      <th>Windows Phone</th>\n","      <th>Sistema operativo (not set)</th>\n","      <th>Sistema operativo promedio</th>\n","      <th>Sistema operativo std</th>\n","      <th>Organic Search</th>\n","      <th>Direct</th>\n","      <th>Socials</th>\n","      <th>Referral</th>\n","      <th>Agrupación de canales predeterminada promedio</th>\n","      <th>Agrupación de canales predeterminada std</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2022-06-14</td>\n","      <td>38.0</td>\n","      <td>23.0</td>\n","      <td>23.0</td>\n","      <td>1.173913</td>\n","      <td>27.0</td>\n","      <td>37.0</td>\n","      <td>1.0</td>\n","      <td>30.0</td>\n","      <td>8.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>4.222222</td>\n","      <td>9.449018</td>\n","      <td>19.0</td>\n","      <td>15.0</td>\n","      <td>3.0</td>\n","      <td>1.0</td>\n","      <td>9.50</td>\n","      <td>7.664855</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2022-06-15</td>\n","      <td>35.0</td>\n","      <td>22.0</td>\n","      <td>23.0</td>\n","      <td>1.043478</td>\n","      <td>24.0</td>\n","      <td>33.0</td>\n","      <td>2.0</td>\n","      <td>21.0</td>\n","      <td>14.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>3.888889</td>\n","      <td>6.607141</td>\n","      <td>8.0</td>\n","      <td>26.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>8.75</td>\n","      <td>10.425330</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2022-06-16</td>\n","      <td>46.0</td>\n","      <td>16.0</td>\n","      <td>21.0</td>\n","      <td>1.142857</td>\n","      <td>24.0</td>\n","      <td>41.0</td>\n","      <td>5.0</td>\n","      <td>37.0</td>\n","      <td>9.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>5.111111</td>\n","      <td>11.129984</td>\n","      <td>11.0</td>\n","      <td>22.0</td>\n","      <td>13.0</td>\n","      <td>0.0</td>\n","      <td>11.50</td>\n","      <td>7.826238</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2022-06-17</td>\n","      <td>32.0</td>\n","      <td>10.0</td>\n","      <td>13.0</td>\n","      <td>1.076923</td>\n","      <td>14.0</td>\n","      <td>26.0</td>\n","      <td>6.0</td>\n","      <td>20.0</td>\n","      <td>12.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>3.555556</td>\n","      <td>6.913933</td>\n","      <td>7.0</td>\n","      <td>23.0</td>\n","      <td>2.0</td>\n","      <td>0.0</td>\n","      <td>8.00</td>\n","      <td>9.027735</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2022-06-18</td>\n","      <td>15.0</td>\n","      <td>9.0</td>\n","      <td>10.0</td>\n","      <td>1.000000</td>\n","      <td>10.0</td>\n","      <td>14.0</td>\n","      <td>1.0</td>\n","      <td>8.0</td>\n","      <td>7.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.666667</td>\n","      <td>3.126944</td>\n","      <td>6.0</td>\n","      <td>9.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>3.75</td>\n","      <td>3.897114</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 29 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f6cd082d-d5f6-49cc-b1de-050e57a65276')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-f6cd082d-d5f6-49cc-b1de-050e57a65276 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-f6cd082d-d5f6-49cc-b1de-050e57a65276');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-813a0cf4-a7be-43a2-8b06-8df67098362a\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-813a0cf4-a7be-43a2-8b06-8df67098362a')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-813a0cf4-a7be-43a2-8b06-8df67098362a button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"dataset"}},"metadata":{},"execution_count":29}],"source":["#Reading the data set, parsing the dates and inferring the date format to date time. We also fill the Nan’s with 0.\n","#agrego index_col=0 para solucionar Unnamed: 0 porque https://stackoverflow.com/questions/43983622/remove-unnamed-columns-in-pandas-dataframe\n","dataset = read_csv(\"/content/drive/MyDrive/a Tesis de Grado/Tesis Versiones/tesis 2024/GA4/tum transmedia/preprocesamiento/datos2023/TUMGA4Salida14Jun2022.csv\", index_col=0)\n","#dataset.fillna(0, inplace=True)//pasar nans a ceros\n","#revisar lo que hago en el otro dataset\n","print(dataset.size)\n","print(dataset.columns)\n","columnaAPreadecir='Número de vistas de página'\n","\n","for i in dataset.columns:\n","  if i != 'Fecha':\n","    dataset[i]= dataset[i].values.astype('float32')# ensure all data is float excepto la columna fecha\n","    #print(i,dataset[i].dtype)\n","print(dataset['Fecha'])\n","import datetime as dt\n","#print(pd.to_datetime(\"20 agos 2015\", format='%d %b %Y', date_parser=dateparser.parse))\n","from dateutil.parser import parse\n","def parsefecha(date):\n","  dt = parse(date)\n","  print(date)\n","  return date\n","mapping_dict = {'ene':'JAN',\n","'feb':'FEB',\n","'mar':'MAR',\n","'abr':'APR',\n","'may':'MAY',\n","'jun':'JUN',\n","'jul':'JUL',\n","'ago':'AUG',\n","'sept':'SEP',\n","'oct':'OCT',\n","'nov':'NOV',\n","'dic':'DEC'}#https://stackoverflow.com/questions/70374750/convert-spanish-date-into-a-pandas-datetime-object\n","dataset[\"Fecha\"]=pd.to_datetime(dataset[\"Fecha\"].replace(mapping_dict, regex=True))#esto porque las fechas como agosto estan ago en español\n","print(dataset[\"Fecha\"].dtype)\n","#dataset['Fecha'] = pd.to_datetime(dataset['Fecha'], format='%d %b %Y')\n","#dataset['Fecha']=dataset['Fecha'].apply(parsefecha)\n","#dataset.drop([\"Fecha Inicio\"], inplace=True, axis=1)\n","#for i in dataset[\"Fecha\"]:\n","#  print(i,dataset[\"Fecha\"].dtype)\n","print(dataset.shape)\n","print(dataset)\n","dataset.head()"]},{"cell_type":"code","source":["# import libraries\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from sklearn.neighbors import NearestNeighbors\n","from copy import deepcopy\n","print('algun nan antes de sacar fechas',dataset.isnull().values.any())\n","#fechaColumna=deepcopy(dataset['Fecha'])\n","#dataset.drop([\"Fecha\"], inplace=True, axis=1)\n","#X = dataset.values\n","#compruebo no hay ni un solo valor NaN en el dataset\n","print('algun nan',dataset.isnull().any())\n","print('algun nan',dataset.isnull().values.any())\n","nan_index = np.where(dataset.isnull())\n","nan_row=dataset.iloc[nan_index]\n","nan_row"],"metadata":{"id":"XmgXZt9_rj5x","executionInfo":{"status":"ok","timestamp":1730061557379,"user_tz":180,"elapsed":26,"user":{"displayName":"Enrique Gauto Sand","userId":"16871957759988522994"}},"colab":{"base_uri":"https://localhost:8080/","height":859},"outputId":"f104d01f-2a7b-412b-c21b-c4b04584b0d6"},"execution_count":30,"outputs":[{"output_type":"stream","name":"stdout","text":["algun nan antes de sacar fechas True\n","algun nan Fecha                                            False\n","Número de vistas de página                       False\n","Usuarios nuevos                                  False\n","Usuarios                                         False\n","Número de sesiones por usuario                    True\n","Sesiones                                         False\n","Argentina                                        False\n","Otros Paises                                     False\n","mobile                                           False\n","desktop                                          False\n","tablet                                           False\n","Categoría de dispositivo promedio                False\n","Categoría de dispositivo std                     False\n","Android                                          False\n","Windows                                          False\n","iOS                                              False\n","Macintosh                                        False\n","Linux                                            False\n","Tizen                                            False\n","Windows Phone                                    False\n","Sistema operativo (not set)                      False\n","Sistema operativo promedio                       False\n","Sistema operativo std                            False\n","Organic Search                                    True\n","Direct                                            True\n","Socials                                           True\n","Referral                                          True\n","Agrupación de canales predeterminada promedio     True\n","Agrupación de canales predeterminada std          True\n","dtype: bool\n","algun nan True\n"]},{"output_type":"execute_result","data":{"text/plain":["     Número de sesiones por usuario  Organic Search  Direct  Socials  \\\n","162                             NaN             0.0     2.0      0.0   \n","555                             1.0             NaN     NaN      NaN   \n","555                             1.0             NaN     NaN      NaN   \n","555                             1.0             NaN     NaN      NaN   \n","555                             1.0             NaN     NaN      NaN   \n","555                             1.0             NaN     NaN      NaN   \n","555                             1.0             NaN     NaN      NaN   \n","\n","     Referral  Agrupación de canales predeterminada promedio  \\\n","162       0.0                                            0.5   \n","555       NaN                                            NaN   \n","555       NaN                                            NaN   \n","555       NaN                                            NaN   \n","555       NaN                                            NaN   \n","555       NaN                                            NaN   \n","555       NaN                                            NaN   \n","\n","     Agrupación de canales predeterminada std  \n","162                                  0.866025  \n","555                                       NaN  \n","555                                       NaN  \n","555                                       NaN  \n","555                                       NaN  \n","555                                       NaN  \n","555                                       NaN  "],"text/html":["\n","  <div id=\"df-66dae9dd-faa4-4a6d-af4f-6e2a3d0761e9\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Número de sesiones por usuario</th>\n","      <th>Organic Search</th>\n","      <th>Direct</th>\n","      <th>Socials</th>\n","      <th>Referral</th>\n","      <th>Agrupación de canales predeterminada promedio</th>\n","      <th>Agrupación de canales predeterminada std</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>162</th>\n","      <td>NaN</td>\n","      <td>0.0</td>\n","      <td>2.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.5</td>\n","      <td>0.866025</td>\n","    </tr>\n","    <tr>\n","      <th>555</th>\n","      <td>1.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>555</th>\n","      <td>1.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>555</th>\n","      <td>1.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>555</th>\n","      <td>1.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>555</th>\n","      <td>1.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>555</th>\n","      <td>1.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-66dae9dd-faa4-4a6d-af4f-6e2a3d0761e9')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-66dae9dd-faa4-4a6d-af4f-6e2a3d0761e9 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-66dae9dd-faa4-4a6d-af4f-6e2a3d0761e9');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-e4df95f7-cfdf-4fa2-98a2-71d327cb9358\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e4df95f7-cfdf-4fa2-98a2-71d327cb9358')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-e4df95f7-cfdf-4fa2-98a2-71d327cb9358 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_bf7e2478-1276-40a8-a515-93dec70ca164\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('nan_row')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_bf7e2478-1276-40a8-a515-93dec70ca164 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('nan_row');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"nan_row","summary":"{\n  \"name\": \"nan_row\",\n  \"rows\": 7,\n  \"fields\": [\n    {\n      \"column\": \"N\\u00famero de sesiones por usuario\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Organic Search\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Direct\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Socials\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Referral\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Agrupaci\\u00f3n de canales predeterminada promedio\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Agrupaci\\u00f3n de canales predeterminada std\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.8660253882408142\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":30}]},{"cell_type":"code","source":["#dado que detecto nans los reemplazo por la media de su column\n","dataset.fillna(dataset.mean(), inplace=True)\n","#dado que detecto nans en la ultima fila borro esa columna\n","dataset=dataset[:-1]\n","#quito la fecha\n","fechaColumna=deepcopy(dataset['Fecha'])\n","dataset.drop([\"Fecha\"], inplace=True, axis=1)\n","X = dataset.values\n","#compruebo nuevamente que no haya ni un solo valor NaN en el dataset\n","print('algun nan',dataset.isnull().any())\n","print('algun nan',dataset.isnull().values.any())\n","nan_index = np.where(dataset.isnull())\n","nan_row=dataset.iloc[nan_index]\n","nan_row"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":735},"id":"txDowdHrsK1c","executionInfo":{"status":"ok","timestamp":1730061557880,"user_tz":180,"elapsed":94,"user":{"displayName":"Enrique Gauto Sand","userId":"16871957759988522994"}},"outputId":"c3d7446f-7c74-4859-efff-33d2c84a9bb2"},"execution_count":31,"outputs":[{"output_type":"stream","name":"stdout","text":["algun nan Número de vistas de página                       False\n","Usuarios nuevos                                  False\n","Usuarios                                         False\n","Número de sesiones por usuario                   False\n","Sesiones                                         False\n","Argentina                                        False\n","Otros Paises                                     False\n","mobile                                           False\n","desktop                                          False\n","tablet                                           False\n","Categoría de dispositivo promedio                False\n","Categoría de dispositivo std                     False\n","Android                                          False\n","Windows                                          False\n","iOS                                              False\n","Macintosh                                        False\n","Linux                                            False\n","Tizen                                            False\n","Windows Phone                                    False\n","Sistema operativo (not set)                      False\n","Sistema operativo promedio                       False\n","Sistema operativo std                            False\n","Organic Search                                   False\n","Direct                                           False\n","Socials                                          False\n","Referral                                         False\n","Agrupación de canales predeterminada promedio    False\n","Agrupación de canales predeterminada std         False\n","dtype: bool\n","algun nan False\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-31-7e75d467324b>:7: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  dataset.drop([\"Fecha\"], inplace=True, axis=1)\n"]},{"output_type":"execute_result","data":{"text/plain":["Empty DataFrame\n","Columns: []\n","Index: []"],"text/html":["\n","  <div id=\"df-0263fe66-095c-4201-b2ca-ec9e8121cda1\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0263fe66-095c-4201-b2ca-ec9e8121cda1')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-0263fe66-095c-4201-b2ca-ec9e8121cda1 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-0263fe66-095c-4201-b2ca-ec9e8121cda1');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","  <div id=\"id_cbe3b1ab-ef5b-4186-8097-c2d7bc8bacff\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('nan_row')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_cbe3b1ab-ef5b-4186-8097-c2d7bc8bacff button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('nan_row');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"nan_row","summary":"{\n  \"name\": \"nan_row\",\n  \"rows\": 0,\n  \"fields\": []\n}"}},"metadata":{},"execution_count":31}]},{"cell_type":"code","source":["# instantiate model\n","nbrs = NearestNeighbors(n_neighbors = 7,metric='euclidean')#con 5\n","\n","# fit model\n","nbrs.fit(X)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":80},"id":"bz0jdqGYuyEe","executionInfo":{"status":"ok","timestamp":1730061570161,"user_tz":180,"elapsed":407,"user":{"displayName":"Enrique Gauto Sand","userId":"16871957759988522994"}},"outputId":"eefe4067-ee4e-458b-f179-8c63bc86cf6c"},"execution_count":32,"outputs":[{"output_type":"execute_result","data":{"text/plain":["NearestNeighbors(metric='euclidean', n_neighbors=7)"],"text/html":["<style>#sk-container-id-1 {\n","  /* Definition of color scheme common for light and dark mode */\n","  --sklearn-color-text: black;\n","  --sklearn-color-line: gray;\n","  /* Definition of color scheme for unfitted estimators */\n","  --sklearn-color-unfitted-level-0: #fff5e6;\n","  --sklearn-color-unfitted-level-1: #f6e4d2;\n","  --sklearn-color-unfitted-level-2: #ffe0b3;\n","  --sklearn-color-unfitted-level-3: chocolate;\n","  /* Definition of color scheme for fitted estimators */\n","  --sklearn-color-fitted-level-0: #f0f8ff;\n","  --sklearn-color-fitted-level-1: #d4ebff;\n","  --sklearn-color-fitted-level-2: #b3dbfd;\n","  --sklearn-color-fitted-level-3: cornflowerblue;\n","\n","  /* Specific color for light theme */\n","  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n","  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-icon: #696969;\n","\n","  @media (prefers-color-scheme: dark) {\n","    /* Redefinition of color scheme for dark theme */\n","    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n","    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-icon: #878787;\n","  }\n","}\n","\n","#sk-container-id-1 {\n","  color: var(--sklearn-color-text);\n","}\n","\n","#sk-container-id-1 pre {\n","  padding: 0;\n","}\n","\n","#sk-container-id-1 input.sk-hidden--visually {\n","  border: 0;\n","  clip: rect(1px 1px 1px 1px);\n","  clip: rect(1px, 1px, 1px, 1px);\n","  height: 1px;\n","  margin: -1px;\n","  overflow: hidden;\n","  padding: 0;\n","  position: absolute;\n","  width: 1px;\n","}\n","\n","#sk-container-id-1 div.sk-dashed-wrapped {\n","  border: 1px dashed var(--sklearn-color-line);\n","  margin: 0 0.4em 0.5em 0.4em;\n","  box-sizing: border-box;\n","  padding-bottom: 0.4em;\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","#sk-container-id-1 div.sk-container {\n","  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n","     but bootstrap.min.css set `[hidden] { display: none !important; }`\n","     so we also need the `!important` here to be able to override the\n","     default hidden behavior on the sphinx rendered scikit-learn.org.\n","     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n","  display: inline-block !important;\n","  position: relative;\n","}\n","\n","#sk-container-id-1 div.sk-text-repr-fallback {\n","  display: none;\n","}\n","\n","div.sk-parallel-item,\n","div.sk-serial,\n","div.sk-item {\n","  /* draw centered vertical line to link estimators */\n","  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n","  background-size: 2px 100%;\n","  background-repeat: no-repeat;\n","  background-position: center center;\n","}\n","\n","/* Parallel-specific style estimator block */\n","\n","#sk-container-id-1 div.sk-parallel-item::after {\n","  content: \"\";\n","  width: 100%;\n","  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n","  flex-grow: 1;\n","}\n","\n","#sk-container-id-1 div.sk-parallel {\n","  display: flex;\n","  align-items: stretch;\n","  justify-content: center;\n","  background-color: var(--sklearn-color-background);\n","  position: relative;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item {\n","  display: flex;\n","  flex-direction: column;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item:first-child::after {\n","  align-self: flex-end;\n","  width: 50%;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item:last-child::after {\n","  align-self: flex-start;\n","  width: 50%;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item:only-child::after {\n","  width: 0;\n","}\n","\n","/* Serial-specific style estimator block */\n","\n","#sk-container-id-1 div.sk-serial {\n","  display: flex;\n","  flex-direction: column;\n","  align-items: center;\n","  background-color: var(--sklearn-color-background);\n","  padding-right: 1em;\n","  padding-left: 1em;\n","}\n","\n","\n","/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n","clickable and can be expanded/collapsed.\n","- Pipeline and ColumnTransformer use this feature and define the default style\n","- Estimators will overwrite some part of the style using the `sk-estimator` class\n","*/\n","\n","/* Pipeline and ColumnTransformer style (default) */\n","\n","#sk-container-id-1 div.sk-toggleable {\n","  /* Default theme specific background. It is overwritten whether we have a\n","  specific estimator or a Pipeline/ColumnTransformer */\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","/* Toggleable label */\n","#sk-container-id-1 label.sk-toggleable__label {\n","  cursor: pointer;\n","  display: block;\n","  width: 100%;\n","  margin-bottom: 0;\n","  padding: 0.5em;\n","  box-sizing: border-box;\n","  text-align: center;\n","}\n","\n","#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n","  /* Arrow on the left of the label */\n","  content: \"▸\";\n","  float: left;\n","  margin-right: 0.25em;\n","  color: var(--sklearn-color-icon);\n","}\n","\n","#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n","  color: var(--sklearn-color-text);\n","}\n","\n","/* Toggleable content - dropdown */\n","\n","#sk-container-id-1 div.sk-toggleable__content {\n","  max-height: 0;\n","  max-width: 0;\n","  overflow: hidden;\n","  text-align: left;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-toggleable__content.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-toggleable__content pre {\n","  margin: 0.2em;\n","  border-radius: 0.25em;\n","  color: var(--sklearn-color-text);\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n","  /* Expand drop-down */\n","  max-height: 200px;\n","  max-width: 100%;\n","  overflow: auto;\n","}\n","\n","#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n","  content: \"▾\";\n","}\n","\n","/* Pipeline/ColumnTransformer-specific style */\n","\n","#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator-specific style */\n","\n","/* Colorize estimator box */\n","#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n","#sk-container-id-1 div.sk-label label {\n","  /* The background is the default theme color */\n","  color: var(--sklearn-color-text-on-default-background);\n","}\n","\n","/* On hover, darken the color of the background */\n","#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","/* Label box, darken color on hover, fitted */\n","#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator label */\n","\n","#sk-container-id-1 div.sk-label label {\n","  font-family: monospace;\n","  font-weight: bold;\n","  display: inline-block;\n","  line-height: 1.2em;\n","}\n","\n","#sk-container-id-1 div.sk-label-container {\n","  text-align: center;\n","}\n","\n","/* Estimator-specific */\n","#sk-container-id-1 div.sk-estimator {\n","  font-family: monospace;\n","  border: 1px dotted var(--sklearn-color-border-box);\n","  border-radius: 0.25em;\n","  box-sizing: border-box;\n","  margin-bottom: 0.5em;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-estimator.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","/* on hover */\n","#sk-container-id-1 div.sk-estimator:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-estimator.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Specification for estimator info (e.g. \"i\" and \"?\") */\n","\n","/* Common style for \"i\" and \"?\" */\n","\n",".sk-estimator-doc-link,\n","a:link.sk-estimator-doc-link,\n","a:visited.sk-estimator-doc-link {\n","  float: right;\n","  font-size: smaller;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1em;\n","  height: 1em;\n","  width: 1em;\n","  text-decoration: none !important;\n","  margin-left: 1ex;\n","  /* unfitted */\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-unfitted-level-1);\n","}\n","\n",".sk-estimator-doc-link.fitted,\n","a:link.sk-estimator-doc-link.fitted,\n","a:visited.sk-estimator-doc-link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","/* Span, style for the box shown on hovering the info icon */\n",".sk-estimator-doc-link span {\n","  display: none;\n","  z-index: 9999;\n","  position: relative;\n","  font-weight: normal;\n","  right: .2ex;\n","  padding: .5ex;\n","  margin: .5ex;\n","  width: min-content;\n","  min-width: 20ex;\n","  max-width: 50ex;\n","  color: var(--sklearn-color-text);\n","  box-shadow: 2pt 2pt 4pt #999;\n","  /* unfitted */\n","  background: var(--sklearn-color-unfitted-level-0);\n","  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n","}\n","\n",".sk-estimator-doc-link.fitted span {\n","  /* fitted */\n","  background: var(--sklearn-color-fitted-level-0);\n","  border: var(--sklearn-color-fitted-level-3);\n","}\n","\n",".sk-estimator-doc-link:hover span {\n","  display: block;\n","}\n","\n","/* \"?\"-specific style due to the `<a>` HTML tag */\n","\n","#sk-container-id-1 a.estimator_doc_link {\n","  float: right;\n","  font-size: 1rem;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1rem;\n","  height: 1rem;\n","  width: 1rem;\n","  text-decoration: none;\n","  /* unfitted */\n","  color: var(--sklearn-color-unfitted-level-1);\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","}\n","\n","#sk-container-id-1 a.estimator_doc_link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","#sk-container-id-1 a.estimator_doc_link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","}\n","</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>NearestNeighbors(metric=&#x27;euclidean&#x27;, n_neighbors=7)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;NearestNeighbors<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.neighbors.NearestNeighbors.html\">?<span>Documentation for NearestNeighbors</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>NearestNeighbors(metric=&#x27;euclidean&#x27;, n_neighbors=7)</pre></div> </div></div></div></div>"]},"metadata":{},"execution_count":32}]},{"cell_type":"code","source":["# distances and indexes of k-neaighbors from model outputs\n","distances, indexes = nbrs.kneighbors(X)\n","# plot mean of k-distances of each observation\n","media_distancias=distances.mean(axis =1)\n","plt.plot(media_distancias)\n","media=np.mean(media_distancias)\n","desvio_distancias= np.std(media_distancias)\n","desvio_distancias_array=np.arange(0,len(media_distancias)-1)\n","desvio_distancias_array2=deepcopy(desvio_distancias_array)\n","desvio_distancias_array.fill(desvio_distancias)\n","desvio_distancias_array2.fill(desvio_distancias*2)\n","plt.plot(media+desvio_distancias_array)\n","plt.plot(media+desvio_distancias_array2)\n","print('desvio_distancias',desvio_distancias,media,desvio_distancias,desvio_distancias*2,media+desvio_distancias*2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":449},"id":"y_XAyT6bu4e9","executionInfo":{"status":"ok","timestamp":1730061575310,"user_tz":180,"elapsed":887,"user":{"displayName":"Enrique Gauto Sand","userId":"16871957759988522994"}},"outputId":"110f4b96-4f48-4639-fee9-74f3baf97200"},"execution_count":33,"outputs":[{"output_type":"stream","name":"stdout","text":["desvio_distancias 14.81797736314887 13.196611040124784 14.81797736314887 29.63595472629774 42.832565766422526\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# visually determine cutoff values > 0.15\n","outlier_index = np.where(distances.mean(axis = 1) > 100)\n","outlier_index"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Njr9K975u_Tm","executionInfo":{"status":"ok","timestamp":1730061650203,"user_tz":180,"elapsed":420,"user":{"displayName":"Enrique Gauto Sand","userId":"16871957759988522994"}},"outputId":"8fbfd46f-4624-4a16-f4b2-215e432c1a26"},"execution_count":34,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(array([ 20, 373, 402]),)"]},"metadata":{},"execution_count":34}]},{"cell_type":"code","source":["# filter outlier values\n","outlier_values = dataset.iloc[outlier_index]\n","outlier_values"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":262},"id":"AeTv2n2hvApZ","executionInfo":{"status":"ok","timestamp":1730061651368,"user_tz":180,"elapsed":17,"user":{"displayName":"Enrique Gauto Sand","userId":"16871957759988522994"}},"outputId":"984540ab-5b2c-44e5-b00f-e20de2e8f3f0"},"execution_count":35,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     Número de vistas de página  Usuarios nuevos  Usuarios  \\\n","20                        147.0             10.0      14.0   \n","373                       157.0             11.0      27.0   \n","402                       215.0             57.0      73.0   \n","\n","     Número de sesiones por usuario  Sesiones  Argentina  Otros Paises  \\\n","20                         1.500000      21.0      144.0           3.0   \n","373                        2.000000      34.0      155.0           2.0   \n","402                        1.342857      94.0      194.0          21.0   \n","\n","     mobile  desktop  tablet  ...  Windows Phone  Sistema operativo (not set)  \\\n","20      5.0    142.0     0.0  ...            0.0                          0.0   \n","373    14.0    143.0     0.0  ...            0.0                          0.0   \n","402   142.0     73.0     0.0  ...            0.0                          0.0   \n","\n","     Sistema operativo promedio  Sistema operativo std  Organic Search  \\\n","20                    16.333334              44.103413            13.0   \n","373                   17.444445              43.896626            29.0   \n","402                   23.888889              43.097935            62.0   \n","\n","     Direct  Socials  Referral  Agrupación de canales predeterminada promedio  \\\n","20    134.0      0.0       0.0                                          36.75   \n","373    16.0      5.0     107.0                                          39.25   \n","402   129.0      9.0      15.0                                          53.75   \n","\n","     Agrupación de canales predeterminada std  \n","20                                  56.397583  \n","373                                 40.027336  \n","402                                 48.048801  \n","\n","[3 rows x 28 columns]"],"text/html":["\n","  <div id=\"df-90dbced5-b0d6-4c93-aa0a-5d4c365d1cec\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Número de vistas de página</th>\n","      <th>Usuarios nuevos</th>\n","      <th>Usuarios</th>\n","      <th>Número de sesiones por usuario</th>\n","      <th>Sesiones</th>\n","      <th>Argentina</th>\n","      <th>Otros Paises</th>\n","      <th>mobile</th>\n","      <th>desktop</th>\n","      <th>tablet</th>\n","      <th>...</th>\n","      <th>Windows Phone</th>\n","      <th>Sistema operativo (not set)</th>\n","      <th>Sistema operativo promedio</th>\n","      <th>Sistema operativo std</th>\n","      <th>Organic Search</th>\n","      <th>Direct</th>\n","      <th>Socials</th>\n","      <th>Referral</th>\n","      <th>Agrupación de canales predeterminada promedio</th>\n","      <th>Agrupación de canales predeterminada std</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>20</th>\n","      <td>147.0</td>\n","      <td>10.0</td>\n","      <td>14.0</td>\n","      <td>1.500000</td>\n","      <td>21.0</td>\n","      <td>144.0</td>\n","      <td>3.0</td>\n","      <td>5.0</td>\n","      <td>142.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>16.333334</td>\n","      <td>44.103413</td>\n","      <td>13.0</td>\n","      <td>134.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>36.75</td>\n","      <td>56.397583</td>\n","    </tr>\n","    <tr>\n","      <th>373</th>\n","      <td>157.0</td>\n","      <td>11.0</td>\n","      <td>27.0</td>\n","      <td>2.000000</td>\n","      <td>34.0</td>\n","      <td>155.0</td>\n","      <td>2.0</td>\n","      <td>14.0</td>\n","      <td>143.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>17.444445</td>\n","      <td>43.896626</td>\n","      <td>29.0</td>\n","      <td>16.0</td>\n","      <td>5.0</td>\n","      <td>107.0</td>\n","      <td>39.25</td>\n","      <td>40.027336</td>\n","    </tr>\n","    <tr>\n","      <th>402</th>\n","      <td>215.0</td>\n","      <td>57.0</td>\n","      <td>73.0</td>\n","      <td>1.342857</td>\n","      <td>94.0</td>\n","      <td>194.0</td>\n","      <td>21.0</td>\n","      <td>142.0</td>\n","      <td>73.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>23.888889</td>\n","      <td>43.097935</td>\n","      <td>62.0</td>\n","      <td>129.0</td>\n","      <td>9.0</td>\n","      <td>15.0</td>\n","      <td>53.75</td>\n","      <td>48.048801</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>3 rows × 28 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-90dbced5-b0d6-4c93-aa0a-5d4c365d1cec')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-90dbced5-b0d6-4c93-aa0a-5d4c365d1cec button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-90dbced5-b0d6-4c93-aa0a-5d4c365d1cec');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-ed202b5a-8256-47e4-b81f-03b4fe855151\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ed202b5a-8256-47e4-b81f-03b4fe855151')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-ed202b5a-8256-47e4-b81f-03b4fe855151 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_0db2c959-e907-43a6-8701-0f43777eeba4\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('outlier_values')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_0db2c959-e907-43a6-8701-0f43777eeba4 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('outlier_values');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"outlier_values"}},"metadata":{},"execution_count":35}]},{"cell_type":"code","source":["plt.scatter(dataset['Número de vistas de página'],dataset['Sesiones'])\n","plt.scatter(outlier_values['Número de vistas de página'], outlier_values['Sesiones'], color = \"r\")\n","#Número de vistas de página X Usuarios nuevos"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":448},"id":"lopz_66pwCGJ","executionInfo":{"status":"ok","timestamp":1730061773598,"user_tz":180,"elapsed":755,"user":{"displayName":"Enrique Gauto Sand","userId":"16871957759988522994"}},"outputId":"9d053071-a05d-4bff-e0db-3793be532080"},"execution_count":39,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.collections.PathCollection at 0x78722df8e4a0>"]},"metadata":{},"execution_count":39},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAAh8AAAGdCAYAAACyzRGfAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAABCtklEQVR4nO3dfXxU9Z3//fdMyB1KBrnLhMpNtLYQURQVzKLuLoJiEXXLdlsXXbVUW4rdArZV2guRRYu6u9XL6oWt0tqVqtXHVVfxJnshKAgb0B83thixigGsZIKAySCQEDLn+iPOkEnm5py5OXPOzOv5eOTRZubMOd+ZQc6H7/fz+Xw9hmEYAgAAsIk31wMAAACFheADAADYiuADAADYiuADAADYiuADAADYiuADAADYiuADAADYiuADAADYqk+uB9BTKBTS3r171a9fP3k8nlwPBwAAmGAYhg4dOqShQ4fK6008t+G44GPv3r0aNmxYrocBAABS8PHHH+vUU09NeIzjgo9+/fpJ6hp8RUVFjkcDAADMCAaDGjZsWOQ+nojjgo/wUktFRQXBBwAALmMmZYKEUwAAYCuCDwAAYCuCDwAAYCuCDwAAYCuCDwAAYCuCDwAAYCuCDwAAYCuCDwAAYCvHNRkDAADZ0dlxXDuefVlH9/xV5cNP1ah/mqaiYvtDAYIPAAAKwNYHl2voojt0ZnB/5LHm7w/S3sX36ty5s2wdC8EHAAB5buuDyzV23nd6PT44uF+D531HWyVbAxByPgAAyGOdHcc1dNEdknrf9MO/V921QJ0dx20bE8EHAAB5bMezL6syuD/uDd8ryd/6qXY8+7JtYyL4AAAgjx3d89eMHpcJBB8AAOSx8uGnZvS4TCD4AAAgj436p2lqrhikUJznQ5ICvsEa9U/TbBsTwQcAAHmsqLiP9i6+V5J6BSDh35vuWmprvw+CDwAA8ty5c2fpnQce16cVg6Ie3+cbrHceeNz2Ph8ewzAMW6+YRDAYlM/nU2trqyoqKnI9HAAA8kY2O5xauX/TZAwAgAJRVNxHZ868OtfDYNkFAADYi+ADAADYiuADAADYiuADAADYiuADAADYiuADAADYiuADAADYiuADAADYiuADAADYiuADAADYivbqAADX6wwZeqvxoPYdatOQfmUaXz1ARV5ProeFOAg+AACuVre9SYtXNqiptS3yWJWvTIum12jqmKocjgzxsOwCAHCtuu1Nmr1iS1TgIUmB1jbNXrFFddubcjQyJELwAQBwpc6QocUrG2TEeC782OKVDeoMxToCuUTwAQBwpbcaD/aa8ejOkNTU2qYnNjQSgDgMwQcAwJX2HYofeHS35OX3dNF9a1iCcRCCDwCAKw3pV2b6WHJAnIXgA0BWdYYM1e88oBe2faL6nQeY/kbGjK8eoCpfmcwU1JID4iyU2gLIGkogkU1FXo8WTa/R7BVb5JFiJp52F84BeavxoGpPH2jDCBEPMx8AsoISSNhh6pgqLbtunPw+80swZnNFkD0EHwAyjhJI2GnqmCqtv32SFk4bbep4K7kiyA6CDwAZZ7YE8q3Gg/YNCnmtyOvRjROrE+aAeNS17De+eoCdQ0MMBB8AMs7stDbT38ikcA6IpF4BSPj3RdNr2PPFAQg+AGSc2Wltpr+RafFyQPy+Mi27bhyJzg5BtQuAjAuXQAZa22LmfXjUdTNg+hvZMHVMlabU+Nnl1sEIPgBkXKISSKa/YYcir4dyWgdj2QVAVjD9DSAeZj4AZA3T3wBiIfgAkFVOm/7uDBkEQ0COEXwAKBi0ewecgZwPAAWBdu+AcxB8AMh7tHsHnIXgA0Deo9074CwEHwDyHu3eAWch+ACQ92j3DjgLwQeAvBdu985up4AzEHwAyHvsdgo4C8EHgIJAu3fAOWgyBqBg0O4dcAaCDwAFxWnt3oFCZGnZpbOzUwsXLlR1dbXKy8t1+umna8mSJTKME415DMPQnXfeqaqqKpWXl2vy5Mn64IMPMj5wAADgTpaCj/vuu0/Lli3Tww8/rPfee0/33Xef7r//fv3yl7+MHHP//ffroYce0qOPPqpNmzbppJNO0uWXX662NurnAQCA5DG6T1skceWVV6qyslLLly+PPDZjxgyVl5drxYoVMgxDQ4cO1W233aYf/ehHkqTW1lZVVlbqiSee0Le+9a2k1wgGg/L5fGptbVVFRUUKbwkAANjNyv3b0szH3/zN32j16tX6y1/+Ikl65513tH79el1xxRWSpMbGRgUCAU2ePDnyGp/PpwkTJqi+vj7mOdvb2xUMBqN+AABA/rKUcHrHHXcoGAxq1KhRKioqUmdnp+655x7NnDlTkhQIBCRJlZWVUa+rrKyMPNfT0qVLtXjx4lTGDgAAXMjSzMezzz6r3//+93rqqae0ZcsW/e53v9N//Md/6He/+13KA1iwYIFaW1sjPx9//HHK5wIAAM5naebjxz/+se64445I7sZZZ52l3bt3a+nSpbrhhhvk9/slSc3NzaqqOtGwp7m5Weecc07Mc5aWlqq0tDTF4QMAALexNPNx5MgReb3RLykqKlIoFJIkVVdXy+/3a/Xq1ZHng8GgNm3apNra2gwMFwAAuJ2lmY/p06frnnvu0fDhw3XmmWdq69at+sUvfqFvf/vbkiSPx6O5c+fq7rvv1hlnnKHq6motXLhQQ4cO1TXXXJON8QMAAJexFHz88pe/1MKFC/X9739f+/bt09ChQ/Xd735Xd955Z+SYn/zkJzp8+LBuueUWtbS06KKLLlJdXZ3KytiqGgAAWOzzYQf6fAAA4D5Z6/MBAACQLoIPAABgK4IPAABgK4IPAABgK4IPAABgK4IPAABgK0t9PgAgXZ0hQ281HtS+Q20a0q9M46sHqMjryfWwANiI4AOAbeq2N2nxygY1tbZFHqvylWnR9BpNHVOV4JUA8gnLLgBsUbe9SbNXbIkKPCQp0Nqm2Su2qG57U45GBsBuBB8Asq4zZGjxygbFaqccfmzxygZ1hhzVcBlAlhB8AMi6txoP9prx6M6Q1NTaprcaD9o3KAA5Q/ABIOv2HYofeKRyHAB3I/gAkHVD+pnb1drscQDcjWoXAFk3vnqAqnxlCrS2xcz78Ejy+7rKbrOFEl/AOQg+AGRdkdejRdNrNHvFFnmkqAAkfPtfNL0ma8EAJb6As7DsAsAWU8dUadl14+T3RS+t+H1lWnbduKwFAZT4As7DzAcA20wdU6UpNX7blj+Slfh61FXiO6XGzxIMYCOCDwARduRFFHk9qj19YEbPGY+VEl+7xgSA4APAF/IxL4ISX8CZyPkAkLd5EZT4As5E8AEUuHxufR4u8Y23cORR1+xONkt8AfRG8AEUuHxufR4u8ZXUKwCxo8QXQGwEH0CBy/e8iFyV+AKIj4RToMAVQl6E3SW+ABIj+AAKnBNan9vBzhJfAImx7AIUOPIiANiN4AMAeREAbMWyCwBJ5EUAsA/BB4AI8iIA2IFlFwAAYCuCDwAAYCuCDwAAYCuCDwAAYCuCDwAAYCuCDwAAYCuCDwAAYCuCDwAAYCuCDwAAYCuCDwAAYCvaqwNIqjNksOcLgIwh+ACQUN32Ji1e2aCm1rbIY1W+Mi2aXsNutwBSwrILgLjqtjdp9ootUYGHJAVa2zR7xRbVbW/K0cgAuBnBB4CYOkOGFq9skBHjufBji1c2qDMU64jY56vfeUAvbPtE9TsPmH4dgPzDsguAmN5qPNhrxqM7Q1JTa5veajyo2tMHJjwXSzcAumPmA0BM+w7FDzysHMfSDYCeCD4AxDSkX1nax2V66QZAfmDZBShAZkpnx1cPUJWvTIHWtpjBg0eS39f12njn3n+oPWNLNwDyB8EHUGDM5l8UeT1aNL1Gs1dskUeKCkDCYcqi6TVRQUusc5thdokHQH5g2QUoIFbzL6aOqdKy68bJ74teWvH7yrTsunFRwUq8c5thdokHQH5g5gMoEMnyLzzqyr+YUuOPms2YOqZKU2r8CZdpEp07kXhLN2Z1X+IZdFKp5JH2f95OF1bA4Qg+gAKRTulskdeTMCcj2bkTXbPn0o1ZyZZ4KOUFnItlF6BAZKp0NlOvSYeZJR5KeQHnIvgACkQmSmcz+RrpxFKPlVJbs0s8lPICzkXwARSIcOlsvAUOj7qWKlLJvwif26ruSz1mWVniSeX8ALKP4AMoEOHSWUm9ApB4pbOpnDsVVpZt3LAsBCAxgg+ggFgpnU3l3PMmn5HSa60s29i5LAQgO6h2AQqMmdLZVN066Qw9/dbHCgTNzTSkUmqbrPNquucHkH3MfAAFKFw6e/U5X1Lt6QMz1g+jyOvRXVfVyKPeSzs9pbrUk2j5KBPnB5B9BB8AMire0k7P+386Sz3xrpGp8wPILo9hGI6qQQsGg/L5fGptbVVFRUWuhwMgRT03rztvxCnavPuzjC710OEUcA4r929yPoAcMLOrbCZfm871UhWrK2qmd65N1nkVgDNZDj4++eQT3X777Xr11Vd15MgRffnLX9Zvf/tbnX/++ZIkwzC0aNEiPfbYY2ppadHEiRO1bNkynXFGalnwQL4xu6tspl6bzvUAIBss5Xx89tlnmjhxooqLi/Xqq6+qoaFB//mf/6lTTjklcsz999+vhx56SI8++qg2bdqkk046SZdffrna2qizB6zuKpvua9O5HgBki6WcjzvuuEMbNmzQm2++GfN5wzA0dOhQ3XbbbfrRj34kSWptbVVlZaWeeOIJfetb30p6DXI+kK86Q4Yuum9N3O6c4bLQ9bdP6rUkkspr07keAFhl5f5taebjxRdf1Pnnn69vfOMbGjJkiM4991w99thjkecbGxsVCAQ0efLkyGM+n08TJkxQfX19zHO2t7crGAxG/QD5yMquspl4bTrXM6MzZKh+5wG9sO0T1e88wP4pAEyzlPPx0UcfadmyZZo/f75++tOf6u2339a//uu/qqSkRDfccIMCgYAkqbKyMup1lZWVked6Wrp0qRYvXpzi8AH3SGdX2VRe+1pD7P/mUj13d+SRAEiHpZmPUCikcePG6ec//7nOPfdc3XLLLbr55pv16KOPpjyABQsWqLW1NfLz8ccfp3wuwMnS2VXW6mvrtjdp+YZdGR1XGHkkANJlKfioqqpSTU305lGjR4/Wnj17JEl+v1+S1NzcHHVMc3Nz5LmeSktLVVFREfUD5KN0dpW18trwlvPJpLKLbaLt7NnCHoBZloKPiRMn6v3334967C9/+YtGjBghSaqurpbf79fq1asjzweDQW3atEm1tbUZGC7gXunsKmvltWa3nDcSXC+ebOeRACgMloKPefPmaePGjfr5z3+uDz/8UE899ZR+/etfa86cOZIkj8ejuXPn6u6779aLL76oP//5z/qXf/kXDR06VNdcc002xg+4Sjq7ypp9rdkcjm9PHGk5PyOdvBUACLOUcHrBBRfo+eef14IFC/Rv//Zvqq6u1oMPPqiZM2dGjvnJT36iw4cP65ZbblFLS4suuugi1dXVqayMLa0BKb1dZc281mwOx5Sa2EuhiaSTtwIAYeztgoKQi/bimXLseEhP1u/S7oNHNGJAX11fO1IlfeJPWob7e8Tbcj6d/h7ZPDcAd2NvF6AbN5eFLn2lQY+92aju+Zv3vPKebr64Wgu+VhPzNeH8kNkrtsgjRQUJ6W4zn81zAygclnI+ALdxc1no0lca9Kt10YGHJIUM6VfrGrX0lfgVLenkliSTzXMDKAwsuyBvubm9+LHjIY1a+GqvwKM7r0faseSKpEsw2VpucvNSFoDMY9kFkLWyUKdty/5k/a6EgYfUNQOy5KV3df7IAXFv/tncct7O7ewJdID8QvCBvOXmstDdB4+YOu7JjXv05MauJn9uyWOxys05OwBiI+cDecvNZaEjBvS1/Bo35LFY5eacHQDxEXwgb6XTzjzXrq8dKaurCuFVmrtefFcbPtzv+t1maeUO5C+CD+StdNqZ51pJH69uvrja8usMSYFgu2Y+vkk/fGabrn1soy66b40rZwho5Q7kL4IP5DU3l4Uu+FqNJo0anPZ53LpE4eacHQCJkXCKvJdOO/Ncu/ni07Vmx6dpncNQ10zP4pUNmlLjd8X7ltydswMgMYIPFAQ7y0LNMFs6Gs5bidfO3CwnlxXH0hkyFAoZ6l9erJajHTGPCfdpyVTODuW8gH0IPgCbWSkdTdTOPBVuWKKI9fn0lOmcHcp5AXuR8wHYKJXS0Xh5K6ncc52+RBHv8+kpkzk7lPMC9mPmA7BJstLRRHkZsfJWzhtxijbv/kz7DrVp0Emluu25d9QcTLzbrBPLisMSfT5h/cuL9cjMcbrwtIEZmfFI5zsBkDqCD+QVJ6/bp9vuPVbeSvff77rK3t1mM/1ZJ/t8JKnlaIe8Hk/G3oebW/ADbkbwgbzh9HV7s/kWqxoCKd3owsszPT8DfxY+g2x81rkoraWcF8gNgg/khfC6fc/p8/C6vRN6epjNt/jNhl0aXz0gpfHaUVacrc86F6W1lPMCuUHwAVdINMXvhnV7M6WjYR5JP3t+u44e65TfVx43eIj3mWSzrDibn3WysuJs5K3k4poACD7gAsmm+J2+bm+mdLQ7Q9KBw8c079l3JMVezsjVElM2P+tEZcXZylvJxTUBUGoLhzNTBunkdXuzpaOJ9Cz5zGVpaLY/61y0w3dzC37ArZj5gGOZneL/j2+MNXU+u9ftzZSOmtH9vU4aVZnTJSY7ciRy0Q7fzS34ATci+IBjmZ3ilyFHrtubKR01K/xen6zfldMlJrtyJHLRDt9pLfiBfMayCxzL7NT9/sPtWjS9RtKJdfqwXK7bv9YQyPg5dx88Yuq4bC0xhXMkJGd91gDcheADjmVlit9p6/Z125u0fMOujJ93xIC+po7L5hKT0z5rAO7Dsgscy+oU/9QxVZo0qlJP1u/S7oNHNGJAX11fO1IlfeyNscO5Hmb4yvro1klnaOBJJbr7lQYdPJx4B9fra0fq8fWNOV9iIkcCQDoIPuBYVssgY5WfPr6+0fYOp1ZyPVrbjuueV95Tla9M3zjvVP1qXWPM4wx1vdeSPl7HlIaSIwEgVSy7wNHMTvE7aWfSVPItAq1tcQOPsK17PpPEsgcA9/MYhpFuJWBGBYNB+Xw+tba2qqKiItfDgUMk63B60X1r4s42hJci1t8+yZYZgfqdB3TtYxszfl6vR9qx5IrIMpKTN9EDUHis3L9ZdoErJJriz1WH03g3//HVA+SvKFUg2J6xa0lSyJCerN+lWRefJollDwDuRfAB18tFh9NE7c0lqe14KGPX6s5sqS0AOBnBB1zP7p1JE+3q+r0VWzJyjXjMltoCgJORcArXC5fkxst28KhrViIT5afJWr4n4/X0bs5lltcjXV87MsVXA4BzEHzA9Yq8Hi2cVhO374WUufLTdFumh4wTe7B0Z2ZkN19cbXvPEgDIBv4mg+vVbW/SkpdjN/XKdPlpJvJGvj1xZMwy2UevG6fvXlKtnjGS1yN995JqLfhaTdrXBgAnIOcDrhYv/yJs4bTRGe17kYm8kSk1fv1sWk3MSpmpY6p022Wjct6lFQCyieADrtUZMnTXi/G3rPdIWvLye7r8i+AjEz0xkrV8T6bKV6ZQyNBLf9qrIf3KdOXZQ3uNo6SPN1JOmy30CAGQSwQfcK2H13ygQDB5f4+H13yoZ97eE7Ms1uqsSKKW72Yc7ejUzOWb0h5HOhKVCdMdFYAd6HAKV6rb3pRWWWv43/ip5oPEuoHnYhxWxVumsnscAPKPlfs3C8lwHSu7xsYTvvkuXtmgzpD1+HvqmCqtv32Snr75Qt3696fnbBxWmCkTtmMcAEDwAddJt9w1rHvb9e46Q4bqdx7QC9s+Uf3OA5Gbcc/HJan29IGaN+WrCfuMpDqOTLPShh4AsomcD7hOJtuk9zxfvHyIq8ZW6cV3muLmSSyaXpN2d9NMv69Uz5/tcQAAMx9wnUy1Se95vnA+RM/ZgaYvtrvv+XigtU2zV2xR3famjI4jW+xuQw8A8TDzAdcJl7uaWXrxeiTDiF2V4lFXc6/x1QMS5kPEE+5UunhlgxLlbXskeTxd3U3jPe/PUPv3RJKVCds1DgBg5gOuEy53NZNjMeuiaknx25mHd6F9YkPvmQ0zwnkSgWB7wmMSBR7hcWS7z0b4c+t+3XTGES83BgCSodQWrmWm3LXKV6YxX6rQ6vf2RQUAXk/XXinnDj8lIyWzZnl7zIC4tc8HvUIA9GTl/k3wAVd75U9N+v5T2d3GPpPCjcm+PXGkptT4c9ZZNJ0Op/QKARCLlfs3OR9whfDNMhBs08HP29W/b4kOHm7Xw6/vzOm4wnkShmGoOdieNGcknCfy6vaAfjYt+0st8RR5Pao9faDp47t//kteejdur5BwDsyUGj/t2gHERfABx8tUN9FM65k3Yrblevd+GlYCgFyx8vm77b0ByA0STuFo8cpfncDvK4ssMUwdU6Vl142T32e+TNUN/TRS/fzd8N4A5A4zH3CsVMpf7bJw2mjdOLE6amlh6pgqTanx64kNjVry8ntJz+H0fhrpfP5Of28AcouZD9jObIlmptqoZ5JHXVUdPQOPsCKvRzdOrE7Ybj18Dqf300jl83fLewOQW8x8wFZWSjSdNnVvthdGuJ9GrBwQO/t6pMvq5++m9wYgt5j5gG3i5Q/Ea1Oe66n7nvfP7jkeycTLAbFyjlyz+vm76b0ByC1mPmALM9u53/HHP6tfabEuPH2giryepO3As6V/ebEe+edxuqB6gDbv/sxUL4xYfTPCOSDdHz9vxCnavPszvbDtE8v9NTLJTJ8PM+3YB5xUov9r2mj5feU5ey8A3IfgA7Ywkz/QcqRDM5dv6rVb7Ow0d4u1quVoh7xej0r6eE2ViyZbSgqfo257k/7231/PeVdQs0tfZpaP7vmHMcx0ALCMZRfYwkr+QPdlmPDyRZWFEtZMMDtes0tJVpecssXqOPJh+QiA8zDzAVtYyR/o2Smz+/JFINim/Yfa9cs1HyjYdjyn4022lBR+D5NGVZo6LttdQc2Ot+c4Yi0fscQCIB0EH7CF1fyNnp0yu7cDr995IGuBR/dt5ePlRYQf3/DhpwmXksLv4cn6XaaOy3ZX0GRLX4nGYbUdu5Te/jEA8hvBB2wRzh/4nsX8jVjLH6saApkaVi+GukpFVzUEYuZFXDW2Si++02Sp/8Xug0dMHZft0mKz58/EONj1FkAi5HzA0Xouf9Rtb9JvNuzK6jW37vksZl5EU2ubfrWu0XLjrRED+po6LtulxWbPn+44nJLfAsC5CD5gi3C+gVmxOmVaOUeVr0xP3jRevjJrk3seSY+92ZiR0t7we7i+dqQjOp6Gl76yOQ4zJdWLVzbE7WoLoDCkFXzce++98ng8mjt3buSxtrY2zZkzRwMHDtTJJ5+sGTNmqLm5Od1xwsU6Q4ae2GB+xiBep0wr7b4XThutPn28arWYG2JIyuR9cdH0GpX08UZ2vu1547ezK2h46Sub47CSVwKgcKUcfLz99tv61a9+pbPPPjvq8Xnz5mnlypV67rnntHbtWu3du1df//rX0x4o3Klue5Muum+NqY3WwuKVcVrJRVjy8ntZzQ1JxuuRbrmkOvIenFKymu1x2JlXAsC9Uko4/fzzzzVz5kw99thjuvvuuyOPt7a2avny5Xrqqac0adIkSdJvf/tbjR49Whs3btSFF16YmVHDFcJr/1YnEhZOGx3zJmglFyHQ2pb13JBEDEP69bpGnTv8lKgAxAklq9kch115JQDcLaWZjzlz5mjatGmaPHly1OObN29WR0dH1OOjRo3S8OHDVV9fn95I4SrpbMf+by/Fzgk4b8QpvfZbiSfctyJXlZ3x8hvCJatXn/OlSAlxLmRrHHbklQBwP8vBxzPPPKMtW7Zo6dKlvZ4LBAIqKSlR//79ox6vrKxUIBB7Cry9vV3BYDDqB+6XynbsYYFgu374zNZej2/e/ZmlfIzu+Rup3FrTvR0XYn6DHXklANzPUvDx8ccf64c//KF+//vfq6wsM9OmS5culc/ni/wMGzYsI+dFbqW7pv/Sn5q09JXoypZUzzlr4sheOQ7JfDvGa6p8ZfruJdXq37fY0rkKLb/BKfktAJzLUs7H5s2btW/fPo0bNy7yWGdnp9atW6eHH35Y//M//6Njx46ppaUlavajublZfr8/5jkXLFig+fPnR34PBoMEIHkgE2v6j73ZqNsuG6WSPt60zjm5xq+fTquJdCV9+PWdSV8zpcavn33xmu55EZL0wra9lq5fiPkNTslvAeBMloKPSy+9VH/+85+jHrvppps0atQo3X777Ro2bJiKi4u1evVqzZgxQ5L0/vvva8+ePaqtrY15ztLSUpWWlqY4fDiV1XbqsYQMaclL7+quq8aoyOtJ6ZxVvjKFQoZe+tNeDelXpn+99Cv6f7d8kvAc4ZyEni3FwyXDgWC7qWt3b9VuB6e1M0+lJTuAwmAp+OjXr5/GjBkT9dhJJ52kgQMHRh6fNWuW5s+frwEDBqiiokI/+MEPVFtbS6VLgUm0HbsVT27co9fe2xdpy231nIHWNs1cvinye7hF+q/WNcZ9zdGOTq1qCEQtD8RqF55MuFW7HQEA7cwBuEnGO5w+8MADuvLKKzVjxgxdcskl8vv9+uMf/5jpy8AF4q39W9W9LXf4nD6TeRc9A5TAFy3SE2k50hHVBjxeu3CnoJ05ALfxGIbhqD7HwWBQPp9Pra2tqqioyPVwkAGdIUMbPzqgOb/fopajHSmdI7yEsf72rv4xE+9do0Awu8FAla9Ma3/89/rbf389pcCj+5izNfvRGTJ00X1r4o7PjjGkw2lLRQBSZ+X+za62yLoir0dejyflwEPqXbaa7cBDX1zvyfpdKc94JNqiPlOstDN3Wv4FS0VA4WJjOdgiU+Wm+w612Vq6uvvgkbTPkc3xurWdOUtFQGEj+IAtMlVuOqRfmQadZF911IgBfdM+RzZLbd3YzpydbwEQfCAlnSFD9TsP6IVtn6h+5wEdOx5S/c4Den7rJ1r+5kd6fstfVb/zQOQGkqztttTVCt1UW26bUgKqfGW6vnZk0nHHY0crcTe2M2fnWwDkfMCyWGv1Xk/srei7r+HHK5MN3zhvvrhav17XGPf5cNnq/s/N9dlIh+eL65X08WrR9Bp9b8UWy+ewo9Q2UUmzU9uZu3WpCEDmMPMBS+Kt1cebIW+KUSYbr+32gq/VmGrLnYklhCk1Q+JuOlflsjbgbmtn7salIgCZRaktTEtW1plIVbdyz2TllWaev+i+NWl1T63ylWnNbX+npzbt1q4DhyVJ5ww7RUP7l0ddL533bHeZq1vKVpN9f04vDwYQG6W2yIp0dqptam3Txo8OyOvxRG6OV549NBKM1O88EHXTTFQWGl5qSGUppPt4Hnn9Q0388iDdOLE67k0unfdsd5mrW9qZu3GpCEBmEXzAtHTX4Hs2GQu3On/xnSbLvR6mjqnSpaMGa/WOT1Mez8Ovf6iHX/8w4fUykXdA7kJv4aWinrlDfvp8AAWB4AOmpbsG37PJWFOcVufhXg+J8hXqtjelFXiYvV4m8g7IXYiNnW+BwkXwgSiJ8gYysVOtGYa6pt8Xr2zQlBp/r5tRuE+EHddL5z3bvautG7llqagQdHYc145nX9bRPX9V+fBTNeqfpqmomFsEsoNqF0TUbW/SRfet0bWPbdQPn9mmax/bqIvuWxPpNhleq5ey32ojUa+HdPIwrF4v0Xv2xPn/3X8ndwFusPXB5do/qEpnXneNzv/prTrzumu0f1CVtj64PNdDQ54i+IAk8+2ure4qm65Y+RJ2tytPVMr66HXj9KiLylyBnrY+uFxj531Hg4P7ox4fHNyvsfO+QwCCrGBODUnbXfdckphS49ddL75ry9hi5Uvkol15svwEchfgRp0dxzV00R2Sev9L1CspJKnqrgXqnHMDSzDIKGY+YKnddWfI0BMbGhUIZr/LaN+SIm3/pEXHjoeiHjfTqt0qM23Iw/kJV5/zJdWePjAquAg/d+XZQyVJL/1pb1R7ecCJdjz7siqD++PeCLyS/K2fasezL9s5LBQAQlmYXsZY1RDQ/Ge3ZTzfIp4jxzp1zys7tPTVHbr54mot+FpX7kWiPhGpyFR+BlvEw22O7vlrRo8DzGLmA6aXMX6zYZdtgUd3IUP61bpGLX3lRIVLvDyMZE7pW6z+PfJVMpGfwRbxcKPy4adm9DjALNqrF7BwWW0g2KYlL72rg4c74h7r8Ui5/pPi9Ug7llyhkj4nYuZjx0P63f826oHXPtCRY51xX9u/vFiP/PM4XfhFWWf4fR/8vF0DTiqR31eecp5GshbstAuHU3V2HNf+QVUaHGfpJSRpn2+wBn+6l5wPJEV7dSQVa4kgkVwHHlLXDMiT9bs06+LTJFl7Dy1HO+T1eiI3/9ajx3R/3Y6MLJFYyZmhpwWcpKi4j/YuvleD531HIUVPhYczrZruWio/gQcyjGWXAhRvicANdh88Iim19xDObcn0EglbxMPNzp07S+888Lg+rRgU9fg+32C988DjOnfurByNDPmMcLbAJCqrlbqWCE45qUSdnSG1th23c2imjBjQN+l7iGdIvzLLZcVmz5vJ4wC7nTt3ljrn3KB3e3Q4ZcYD2cKfrALQPbdjy+7kSwQHDx+zb3AWeD3S9bUjU+pw2r9vsUIhQxs/OpDxJZJkLdhpsw43KCruozNnXp3rYaBAEHzkOau5HU5WVlykNTua1d6j74cZLUc6NHP5JvUvN9eZ1coSCVvEA4A15HzkMTfndsRy9FinZq/Yol37D6d8jp4768ZjdYkkUQt22qwDQDRmPvJUqnkRThbOyXj6rT3yV5SpORh/p9lUm4+ls0TCFvEAYA7BR57Kxs6vTmBICgTbNfVMv+reDfR6Phx0pBp4SOktkbhli/hwHhBBEoBcIPjIU6saet+Yk+lfXmx6WSIV/cuLdc4wn974y/7kBycRDjy8nq7+H2F+X5muGOPXbzbsMjWe7u/XXyCt0GkDDyDXCD7yUN32JlM33+4WThutUVUVmvn4puwMStIjM8dpR1MwI8FHWDjw+PbEkZpS49f46gF6q/Ggqff/yD+Pk9frKah//YfzgHrODIV7nJCfAsAOJJzmmXCuhxVVvjLdOLFaF4wcoGzce8M7xl542kD984QRWTn/q9sDkeAh2a63kfGcPjDuLrX5KFmPE6mrxwk78QLINoKPPGM118OjEzkOm3d/pkzfd3rmUfx63c7MXkDRvTmkE6Wv3a8fbzyFxEobeADIJoKPPGOlP0VVjzLQbLT/7t+3OHKNuu1NeuC1DzJ+jbDu46f0tTfawANwCnI+8ozZ/hQLp43WjROro/71P+jk0oyPp7SPV1Nq/CktB1nV871T+hqNNvAAnILgI88ka/UtdVV5hAzpxW2fRG8ln4Wl/kCwPTKNn83S36o4vTncUvpqB9rAA3AKgo88k6jVd1jL0Q7d88p7kd/DZZaptC03w45p/ELM4bCKNvAAnIKcjzwUL98hnqYvyix37T+SlfEM6VeW1an8eZO/UpA5HKkgFwaAEzDzkafC+Q4bdx7QnKe2JG0eZkh6+q3dlq7hkeTp0eSr5/Pdp/GTLQdV9ivRf3zjHP3g6a2mm535K0p166QvWxp3oSMXBkCuMfORhzpDhup3HtCL2z5R3btNpm/kgWC76WuEb1OzLhqZ8PnwNH6y8lePpMVXj1GfIq/p8Xok3XXVmdw0UxDOhSmUHicAnIWZjzwTq3V2Nvh9ZbpqbJVefKcp7vM923WHp/x7jq/7sS9s+8TU9fuXF+veGWexTAAALkTwkUfitc7OhjOHVujX6xrjXmvhtNj7hCSb8jebG/LIzHGa+OVBqQ4fAJBDBB95IlHr7Gx47b19cZ/zSFrycoMm11Rq8+7PegUZicpfzZaDXniaO8pn2T0WAHoj+MgTVtuqZ1O4TfeFS1/TwcMn8jfM7JyaT+Wg7B4LALGRcJonnNgSu3vgIZ3YObVue+w8kbB8KAcNL4H1DAjNfgYAkM+Y+cgTbmiJbeiLqpaVDZpS4084e+HmctBku8ea/QwAIF8RfOSJcK6EU5Ze4um+c2qytudubY1uZfdYN74/AEgXyy55Ipwr4ZZ/RztxmShT2D0WABIj+Mgj4VyJviVFuR5KUm5YJkoVu8cCQGIsuzic1VLNSaMq1dbRaeMIrYu3A20qnFjKyu6xAJAYwYeDpVKq+WT9rrh7rTjF0Y5OrWoIpF214tRS1nwqFwaAbGDZxaFSLdXcfTA7O9NmUsuRjrTLTZ1eypoP5cIAkC3MfDhQOqWaIwb0tWOIaTOUermpW0pZ3VwuDADZRPDhQGZLNTd+dEBejyfqxnZ97Ugtefk9+wabhnC56fjqAVE36PNGnBKzLXuYm0pZ3VouDADZRPDhQGZLMOf8fkvU9vNVvjKN+VJFrzwDJ1vVEND8Z7dFBRNej6LyVnrmcVDKCgDuRs6HA5ktweweeEhd/9pf1bDPNYGHJP1mw65esxg9E2Z75nFQygoA7kbw4UDhUk03ZAb0Ly/W778zQe/921QtnDZa100YrvJic3+szKY+hGORxSsb1Bkykn4+HmW2nBcAkFkEHw5U5PVo4bQaV8xgtBztkNfjUXlJkWZdfJru/oez9MA3zzEVOFkpCe6exxEuZZXU6zqUsgKA8xF8OFDd9iYtebkh18MwbVVDIOr3cJlplS/2skeVr0yzJo5M6VrhPA5KWQHAvUg4dZhw/4pcz3p892+rdaS9U09u3JP02N9s2KXx1QOibvjdy0wDwTYd/LxdA04qkd9XHqluWb5hl+Vxdc/joJQVANyJ4MNBEvWvsJPXI902ZZSKvB699t6+pDvlJuur4fVINUN9UYFBshbksa4RqyU5pawoRJ0dx7Xj2Zd1dM9fVT78VI36p2kqKuavc7gHf1odJFn/CruEDGnz7s9Ue/pALZpeo++t2JLw+Fh9NZK1Pk/Ugrwn8jiAE7Y+uFxDF92hM4P7I481f3+Q9i6+V+fOnZXDkQHmkfPhIE7qS9E9t8Jsfkb4NWZbn8fL2+gZX5DHAXTZ+uByjZ33HQ3uFnhI0uDgfo2d9x1tfXB5jkYGWMPMh4M4qS9F97FMrvGbys8Y0q/McuvzWHkbyTqcAoWos+O4hi66Q1LvfzV6JYUkVd21QJ1zbmAJBo7Hn1AHGV89QP6KMgWCuZ0BGXBSsQLBNtXvPKBzhvXX9k9a1LekSEeOdcY8vns+Riqtz2PlbZDHAUTb8ezLUUstPXkl+Vs/1bvPvqwzZ15t38CAFFhadlm6dKkuuOAC9evXT0OGDNE111yj999/P+qYtrY2zZkzRwMHDtTJJ5+sGTNmqLm5OaODzlerGgJqOx77Bm+ng4c7NO8P23TtYxs1+s463fPKjriBh9QVUITzMWh9DmTH0T1/zehxQC5ZCj7Wrl2rOXPmaOPGjVq1apU6Ojp02WWX6fDhw5Fj5s2bp5UrV+q5557T2rVrtXfvXn3961/P+MDzTThPouVIR/KDHYzW50B2lA8/NaPHAbnkMQwj5crOTz/9VEOGDNHatWt1ySWXqLW1VYMHD9ZTTz2lf/zHf5Qk7dixQ6NHj1Z9fb0uvPDCpOcMBoPy+XxqbW1VRUVFqkNzjc6QoY07D+j7T21R61F3Bh7hZZf1t0+SJF1035q4JbTdjw3ncXSGDHp1AEl0dhzX/kFVGhzcH/NfjSFJ+3yDNfjTveR8ICes3L/T+hPa2toqSRowoKv3wubNm9XR0aHJkydHjhk1apSGDx8eN/hob29Xe3t71OALRaxyVDfqmccRr4Q2VslsspJcAF2Kivto7+J7NXjedxRS9LR16Iv/bbprqfwEHnCBlEttQ6GQ5s6dq4kTJ2rMmDGSpEAgoJKSEvXv3z/q2MrKSgUCgRhn6coj8fl8kZ9hw4alOiRXiVeO6mZWW5+bLckF0OXcubP0zgOP69OKQVGP7/MN1jsPPE6fD7hGyiHynDlztH37dq1fvz6tASxYsEDz58+P/B4MBvM+AHFKJ9NMs9L63GpJLoAu586dpc45N+jdHh1OmfGAm6T0p/XWW2/VSy+9pHXr1unUU08kN/n9fh07dkwtLS1Rsx/Nzc3y+/0xz1VaWqrS0tJUhuF44VyGvS1Hte3jzyRJIweepK8M6ZdXMx6S5K8otdT6PJWSXNiPfBxnKiruQzktXM1S8GEYhn7wgx/o+eef1xtvvKHq6uqo58877zwVFxdr9erVmjFjhiTp/fff1549e1RbW5u5UbtAonyOfPyru+14SKsaAqbzNCjJdT7ycQBki6Wcjzlz5mjFihV66qmn1K9fPwUCAQUCAR09elSS5PP5NGvWLM2fP1+vv/66Nm/erJtuukm1tbWmKl3yRbJ8jnxbbpGk1iMdlvI0KMl1NvJxAGSTpeBj2bJlam1t1d/93d+pqqoq8vOHP/whcswDDzygK6+8UjNmzNAll1wiv9+vP/7xjxkfuFPlaz5HMuH3u3hlgzpDyd99eFfbeLNAHnX9K7vnUg6yL1k+jmT+ewaAWCwFH4ZhxPy58cYbI8eUlZXpkUce0cGDB3X48GH98Y9/jJvvkY+csjNtLnTP00gmvKut1HsZil1sc8tKPg4ApIJdbTOMHAXzn4HZklzYi3wcANlGbVaGuS1H4foLh6s52Kb/r2GfqWOf3Lgn6XFWPoNkJbmwH/k4ALKN4CPDwrkMTl96Cbc5v+uqrgZxE+9drUCwPe6xlRWlmjyqMmnw4fVI5404xdJYEpXkJkMp6AmZ+izCf4aTtcgnHwdAqgg+Miycy/C9FVtyPZSEuu9EW7e9SW3HQzGPC7dIbzse0g1PvJ30vCFD2rz7M1t6c1AKekImP4vwn2GzLfIBwCpyPgpcst10y0uKJMnSbrt25AJQCnpCNj4L8nEAZBMzHxkWLlN0g7tefFeSJ2FZcFtHp+XzZjsXgNbsJ2TzsyAfB0C2EHxkmJtKbePleHRntZWDHb05aM1+QrY/i3TycQAgHpZdMqzQyw/tyAWgFPQEPgsAbkTwkWGFXH44b/IZtuQCUAp6Ap8FADci+MiwcJmi03nUtROtvyJxi3OzkxhVvjLdOumMDI0uMVqzn8BnAcCNCD4yrMjr0cJpo3M9jKQMSXdeeabuuipxi/ObL65OuguvR/aWXtKa/QQ+CwBuRPCRYXXbm7Tk5fdyPQxTlrzcVZWTqKRywddqtOy6cXFnc6pyVHpJKegJfBYA3MZjGIajtqYMBoPy+XxqbW1VRUVFrodjSbjfgqM+0ATC/xZedt24pCWV4e6ZgdajOnj4mAac3LVkk+vSSzqcnsBnASCXrNy/CT4ypDNk6G+WvqbmQ8dyPRRLwq2y198+ydSNKpM3OG6WAJA/rNy/6fORIT98ZqvrAg/JWh+ITLbwpjU6ABQucj4yYOkrDXrpT+5u552sD0QmW3jTGh0AChvBR5qOHQ/psTcbcz2MKENOLtbPvjZa/1I7QtdfONzcaxL0gUjWwlvqauHdaaIdaibPBQBwJ4IPCzpDhup3HtAL2z5R/c4D6gwZerJ+l+UW5Nm27/MOeT3Souln6q6rxshfURr3WDN9IKy08E4mk+cCALgTOR8mxctRONR2PIejim/Jy+/p8fWNumpsldqOh2IeY7YPRCZbeNMOHABA8GFCvBJap28g19Tapl+ti78k5OtbrHu/flbSBM9MtvCmHTgAgGWXJBLlKLhdeXGRptT4kx6XyRbetAMHABB8JJEsR8HNzOZWZLKFN+3AAQAEH0k4Ofegf3lx2ucw+/4y2cKbduAAUNjI+Uhi0MnxK0Vy7ZGZ47SjKZjWXjJWciumjqlK2oY9F+cCALgLwUcyDk32qPKV6cLTBurC0wbqsTc/UiDYbun14bbqVnMriryepJ1Qc3EuAIB7sOySxP7D1m7qdgnnRaxqCMQtpY2H3AoAQC4RfCThxJLPfxz3JU0dUxUpAW450hHzuP59i/XdS6pVRW4FAMBBWHZJ4rwRp8jrkaO6mC655ixTJcDlxUX6ydTR+snU0eRWAAAcg+Ajic27P3NU4CFJ2z5ukZS8yVn33WrJrQAAOAXBRxJOLLW1MiYnjh8AUNgIPpJwYs6HlTE5cfwAgMJG8NFDZ8iI5EcMOrlUbUedtXGc19OVh1Lk9ajKV6ZAa1vMvI9US2kBAMg2go9uYu1c6zQhoysPpfb0gVo0vUazV2yRR9HtSCilBQA4GaW2XwiXrTo58AgL53HQphwA4EbMfMh9O9d2b/lOm3IAgNsQfMiFO9f2iJJoUw4AcBOWXSS91hDI9RA0pWaI6WOd2vIdAAAzCj74qNvepOUbduV0DN+9pFozxp1q+njKZwEAblbQyy7hXI9c8UjadudlOrmsjy66b42p14RLbbvrXh5MzgcAwOkKOvjIda6HIWnq/71O37pgmOlxdC+1lWKXB1f5yrRoeg3VLgAARyroZRcntB4PtLbpgdc+sPSa8LjjlQcHWts0e8UW1W1vytg4AQDIlIIOPgb0Lcn1EFIq7x3SryxheXD4scUrG9TptF3xAAAFr6CDjx2BQ7kegmVVX7RMT7ZkZOjErrYAADhJQQcf/1W/K9dDsMSjEy3TzS4ZOWFpCQCA7go24fTm/3pbH392NNfDMK1nEqnZclvKcgEATlOQwcfRY51a1bAv18MwxVfeR//PP5+nC08fGFU+O756ALvaAgBcqSCXXX7+Sm57e1jRevS4vF5Pr74dRV6PFk2viXlOdrUFADhZQQYfa3Z8avs1zxzaT4/G2IHWjHh5G+xqCwBwo4Jbdln6SoM+abE/1+PdvV2VNetvnxTpRrr/ULuWvPxe0tcmyttgV1sAgNsUVPBx7HhIj73ZmLPrL17ZoCk1/kh30s6Qocfe/EiBYOyN4szmbbCrLQDATQpq2eWG32xUNnpujRhYbuq4nn03VjUE1HY8FPNY8jYAAPmqYIKPpa80qP6jzzJ+3jFfqtDaH0/SpFGDTR3fszV6y5GOmMf5+haTtwEAyEsFEXxkc7nlZ1/rqji5+eLTTR2frDV6WHlxkabU+DMwQgAAnKUggo8n63dlfLnFoxOtzqUTfTfiLZB0P97Mbrq0RgcA5KuCCD52HzyS0fPFysew0neD1ugAgEJWEMHHiAF9M3q+eH00zPbdoDU6AKCQFUSp7aSvVprqp5GIR9J/fmOsqvqXJ+yjYabvBq3RAQCFrCCCj7//xRtpn8OQVNW/3FQ/jWR9N8JLNLNXbJHni3OHUWILAMh3eb/sUn3Hyxk7VyZzMGiNDgAoVHk98/Fh4POE5axWZToHg9boAIBClNfBxxUPrc3IebKZg0FrdABAocnasssjjzyikSNHqqysTBMmTNBbb72VrUvF1RG7c7kl5GAAAJBZWQk+/vCHP2j+/PlatGiRtmzZorFjx+ryyy/Xvn37snG5uIoz8O7IwQAAILM8hmFkfKu1CRMm6IILLtDDDz8sSQqFQho2bJh+8IMf6I477kj42mAwKJ/Pp9bWVlVUVKQ1jg8Dn2vyg+aXXm6f+lXd+DfV2vZxCzkYAABYYOX+nfGcj2PHjmnz5s1asGBB5DGv16vJkyervr6+1/Ht7e1qbz+xpXwwGMzYWL7sP7lXKWs8U2qGaPbffVmSyMEAACCLMr7ssn//fnV2dqqysjLq8crKSgUCgV7HL126VD6fL/IzbNiwjI6n8d5pcfdbCZtSM0SP/csFGb0uAACILefVLgsWLND8+fMjvweDwawEIB8GPtcVD61VR6griXTcsH6q+dIp+unXalReUpTR6wEAgPgyHnwMGjRIRUVFam5ujnq8ublZfn/vLeJLS0tVWlqa6WH08mX/yfrg59Oyfh0AAJBYxpddSkpKdN5552n16tWRx0KhkFavXq3a2tpMXw4AALhMVpZd5s+frxtuuEHnn3++xo8frwcffFCHDx/WTTfdlI3LAQAAF8lK8PHNb35Tn376qe68804FAgGdc845qqur65WECgAACk9W+nykI5N9PgAAgD2s3L/zfldbAADgLAQfAADAVgQfAADAVgQfAADAVgQfAADAVjlvr95TuPgmkxvMAQCA7Arft80U0Tou+Dh06JAkZXx/FwAAkH2HDh2Sz+dLeIzj+nyEQiHt3btX/fr1k8eTbD9ac8Kb1X388cf0DnEoviPn4ztyB74n58vX78gwDB06dEhDhw6V15s4q8NxMx9er1ennnpqVs5dUVGRV190PuI7cj6+I3fge3K+fPyOks14hJFwCgAAbEXwAQAAbFUQwUdpaakWLVqk0tLSXA8FcfAdOR/fkTvwPTkf35EDE04BAEB+K4iZDwAA4BwEHwAAwFYEHwAAwFYEHwAAwFZ5H3w88sgjGjlypMrKyjRhwgS99dZbuR5Swbrrrrvk8XiifkaNGhV5vq2tTXPmzNHAgQN18skna8aMGWpubs7hiAvDunXrNH36dA0dOlQej0f//d//HfW8YRi68847VVVVpfLyck2ePFkffPBB1DEHDx7UzJkzVVFRof79+2vWrFn6/PPPbXwX+S3Zd3TjjTf2+m9r6tSpUcfwHWXX0qVLdcEFF6hfv34aMmSIrrnmGr3//vtRx5j5O27Pnj2aNm2a+vbtqyFDhujHP/6xjh8/budbsUVeBx9/+MMfNH/+fC1atEhbtmzR2LFjdfnll2vfvn25HlrBOvPMM9XU1BT5Wb9+feS5efPmaeXKlXruuee0du1a7d27V1//+tdzONrCcPjwYY0dO1aPPPJIzOfvv/9+PfTQQ3r00Ue1adMmnXTSSbr88svV1tYWOWbmzJl69913tWrVKr300ktat26dbrnlFrveQt5L9h1J0tSpU6P+23r66aejnuc7yq61a9dqzpw52rhxo1atWqWOjg5ddtllOnz4cOSYZH/HdXZ2atq0aTp27Jj+93//V7/73e/0xBNP6M4778zFW8ouI4+NHz/emDNnTuT3zs5OY+jQocbSpUtzOKrCtWjRImPs2LExn2tpaTGKi4uN5557LvLYe++9Z0gy6uvrbRohJBnPP/985PdQKGT4/X7j3//93yOPtbS0GKWlpcbTTz9tGIZhNDQ0GJKMt99+O3LMq6++ang8HuOTTz6xbeyFoud3ZBiGccMNNxhXX3113NfwHdlv3759hiRj7dq1hmGY+zvulVdeMbxerxEIBCLHLFu2zKioqDDa29vtfQNZlrczH8eOHdPmzZs1efLkyGNer1eTJ09WfX19DkdW2D744AMNHTpUp512mmbOnKk9e/ZIkjZv3qyOjo6o72vUqFEaPnw431cONTY2KhAIRH0vPp9PEyZMiHwv9fX16t+/v84///zIMZMnT5bX69WmTZtsH3OheuONNzRkyBB99atf1ezZs3XgwIHIc3xH9mttbZUkDRgwQJK5v+Pq6+t11llnqbKyMnLM5ZdfrmAwqHfffdfG0Wdf3gYf+/fvV2dnZ9SXKEmVlZUKBAI5GlVhmzBhgp544gnV1dVp2bJlamxs1MUXX6xDhw4pEAiopKRE/fv3j3oN31duhT/7RP8dBQIBDRkyJOr5Pn36aMCAAXx3Npk6dar+67/+S6tXr9Z9992ntWvX6oorrlBnZ6ckviO7hUIhzZ07VxMnTtSYMWMkydTfcYFAIOZ/a+Hn8onjdrVF/rriiisi///ss8/WhAkTNGLECD377LMqLy/P4cgAd/vWt74V+f9nnXWWzj77bJ1++ul64403dOmll+ZwZIVpzpw52r59e1ROG6Ll7czHoEGDVFRU1CuTuLm5WX6/P0ejQnf9+/fXV77yFX344Yfy+/06duyYWlpaoo7h+8qt8Gef6L8jv9/fK4n7+PHjOnjwIN9djpx22mkaNGiQPvzwQ0l8R3a69dZb9dJLL+n111/XqaeeGnnczN9xfr8/5n9r4efySd4GHyUlJTrvvPO0evXqyGOhUEirV69WbW1tDkeGsM8//1w7d+5UVVWVzjvvPBUXF0d9X++//7727NnD95VD1dXV8vv9Ud9LMBjUpk2bIt9LbW2tWlpatHnz5sgxa9asUSgU0oQJE2wfM6S//vWvOnDggKqqqiTxHdnBMAzdeuutev7557VmzRpVV1dHPW/m77ja2lr9+c9/jgoUV61apYqKCtXU1NjzRuyS64zXbHrmmWeM0tJS44knnjAaGhqMW265xejfv39UJjHsc9tttxlvvPGG0djYaGzYsMGYPHmyMWjQIGPfvn2GYRjG9773PWP48OHGmjVrjP/zf/6PUVtba9TW1uZ41Pnv0KFDxtatW42tW7cakoxf/OIXxtatW43du3cbhmEY9957r9G/f3/jhRdeMP70pz8ZV199tVFdXW0cPXo0co6pU6ca5557rrFp0yZj/fr1xhlnnGFce+21uXpLeSfRd3To0CHjRz/6kVFfX280NjYar732mjFu3DjjjDPOMNra2iLn4DvKrtmzZxs+n8944403jKampsjPkSNHIsck+zvu+PHjxpgxY4zLLrvM2LZtm1FXV2cMHjzYWLBgQS7eUlbldfBhGIbxy1/+0hg+fLhRUlJijB8/3ti4cWOuh1SwvvnNbxpVVVVGSUmJ8aUvfcn45je/aXz44YeR548ePWp8//vfN0455RSjb9++xj/8wz8YTU1NORxxYXj99dcNSb1+brjhBsMwusptFy5caFRWVhqlpaXGpZdearz//vtR5zhw4IBx7bXXGieffLJRUVFh3HTTTcahQ4dy8G7yU6Lv6MiRI8Zll11mDB482CguLjZGjBhh3Hzzzb3+kcV3lF2xvh9Jxm9/+9vIMWb+jtu1a5dxxRVXGOXl5cagQYOM2267zejo6LD53WSfxzAMw+7ZFgAAULjyNucDAAA4E8EHAACwFcEHAACwFcEHAACwFcEHAACwFcEHAACwFcEHAACwFcEHAACwFcEHAACwFcEHAACwFcEHAACwFcEHAACw1f8P5Ik46tuX57IAAAAASUVORK5CYII=\n"},"metadata":{}}]},{"cell_type":"code","source":["plt.scatter(dataset['Número de vistas de página'],dataset['Usuarios nuevos'])\n","plt.scatter(outlier_values['Número de vistas de página'], outlier_values['Usuarios nuevos'], color = \"r\")"],"metadata":{"id":"dZX7fFVTn1vz","colab":{"base_uri":"https://localhost:8080/","height":448},"executionInfo":{"status":"ok","timestamp":1730061736798,"user_tz":180,"elapsed":454,"user":{"displayName":"Enrique Gauto Sand","userId":"16871957759988522994"}},"outputId":"064c4b67-ef2f-4cab-fb88-c743e1b318de"},"execution_count":37,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.collections.PathCollection at 0x78722de145b0>"]},"metadata":{},"execution_count":37},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["plt.scatter(dataset['Sesiones'],dataset['Usuarios nuevos'])\n","plt.scatter(outlier_values['Sesiones'], outlier_values['Usuarios nuevos'], color = \"r\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":448},"id":"XN2VQPsnpXgx","executionInfo":{"status":"ok","timestamp":1730061741887,"user_tz":180,"elapsed":472,"user":{"displayName":"Enrique Gauto Sand","userId":"16871957759988522994"}},"outputId":"0205acbc-ee5d-4139-f4a8-856ac1b993c2"},"execution_count":38,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.collections.PathCollection at 0x78722dbee200>"]},"metadata":{},"execution_count":38},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["\n","#agregar columna fecha Nuevamente\n","dataset['Fecha']=fechaColumna\n","outlier_index[0]"],"metadata":{"id":"xvFwGdCm4Wpx","executionInfo":{"status":"ok","timestamp":1730061836258,"user_tz":180,"elapsed":393,"user":{"displayName":"Enrique Gauto Sand","userId":"16871957759988522994"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"c7dfae10-2763-4057-d935-87cb105ae072"},"execution_count":40,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 20, 373, 402])"]},"metadata":{},"execution_count":40}]},{"cell_type":"code","source":["dataset.columns"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_FF94C7Gufax","executionInfo":{"status":"ok","timestamp":1730061933290,"user_tz":180,"elapsed":13,"user":{"displayName":"Enrique Gauto Sand","userId":"16871957759988522994"}},"outputId":"33210768-1faf-4028-d5e2-9f0f7109aeda"},"execution_count":41,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['Número de vistas de página', 'Usuarios nuevos', 'Usuarios',\n","       'Número de sesiones por usuario', 'Sesiones', 'Argentina',\n","       'Otros Paises', 'mobile', 'desktop', 'tablet',\n","       'Categoría de dispositivo promedio', 'Categoría de dispositivo std',\n","       'Android', 'Windows', 'iOS', 'Macintosh', 'Linux', 'Tizen',\n","       'Windows Phone', 'Sistema operativo (not set)',\n","       'Sistema operativo promedio', 'Sistema operativo std', 'Organic Search',\n","       'Direct', 'Socials', 'Referral',\n","       'Agrupación de canales predeterminada promedio',\n","       'Agrupación de canales predeterminada std', 'Fecha'],\n","      dtype='object')"]},"metadata":{},"execution_count":41}]},{"cell_type":"code","source":["dataset = dataset.drop(outlier_index[0])\n","print(dataset.values.shape)\n","#print(update_df.values.shape)\n","#dataset=update_df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":356},"id":"UfOuPtBozlVK","executionInfo":{"status":"error","timestamp":1730061953481,"user_tz":180,"elapsed":352,"user":{"displayName":"Enrique Gauto Sand","userId":"16871957759988522994"}},"outputId":"7388835f-ed31-4bc8-9630-6d63f31e49e8"},"execution_count":43,"outputs":[{"output_type":"error","ename":"KeyError","evalue":"'[20, 373, 402] not found in axis'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-43-b14af05ba5fb>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdataset\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdataset\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutlier_index\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m#print(update_df.values.shape)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m#dataset=update_df\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[1;32m   5579\u001b[0m                 \u001b[0mweight\u001b[0m  \u001b[0;36m1.0\u001b[0m     \u001b[0;36m0.8\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5580\u001b[0m         \"\"\"\n\u001b[0;32m-> 5581\u001b[0;31m         return super().drop(\n\u001b[0m\u001b[1;32m   5582\u001b[0m             \u001b[0mlabels\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5583\u001b[0m             \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[1;32m   4786\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;32min\u001b[0m \u001b[0maxes\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4787\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4788\u001b[0;31m                 \u001b[0mobj\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_drop_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlevel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4789\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4790\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0minplace\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m_drop_axis\u001b[0;34m(self, labels, axis, level, errors, only_slice)\u001b[0m\n\u001b[1;32m   4828\u001b[0m                 \u001b[0mnew_axis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlevel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4829\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4830\u001b[0;31m                 \u001b[0mnew_axis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4831\u001b[0m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnew_axis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4832\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, errors)\u001b[0m\n\u001b[1;32m   7068\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mmask\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0many\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   7069\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0merrors\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;34m\"ignore\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 7070\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"{labels[mask].tolist()} not found in axis\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   7071\u001b[0m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m~\u001b[0m\u001b[0mmask\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   7072\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdelete\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: '[20, 373, 402] not found in axis'"]}]},{"cell_type":"code","source":["# Definimos las ventanas basadas en la secuencia de Fibonacci (6, 12, 18, 30, 48...)\n","from sklearn.impute import SimpleImputer\n","df=deepcopy(dataset)\n","ventanas = [6, 12, 18, 30, 48, 78, 126, 203, 329]\n","columna='Número de vistas de página'\n","# Calcular la mediana móvil (rolling median) para cada ventana y agregarla como una columna nueva en el DataFrame\n","df.drop([\"Fecha\"], inplace=True, axis=1)\n","# Calcular la mediana móvil (rolling median) para cada ventana y agregarla como una columna nueva en el DataFrame\n","for ventana in ventanas:\n","    df[f'rolling_median_{ventana}'] = df[columna].rolling(window=ventana).median()\n","\n","# Reemplazar los NaNs en las columnas de medianas móviles con la media de cada columna\n","for ventana in ventanas:\n","    col = f'rolling_median_{ventana}'\n","    df[col].fillna(df[col].mean(), inplace=True)\n","\n","# Calcular la mediana de las medianas (por fila) y agregarla como una nueva columna\n","df['mediana_de_medianas'] = df[[f'rolling_median_{v}' for v in ventanas]].median(axis=1)\n","\n","# Mostrar el DataFrame resultante\n","print(df)\n","\n","dataset['mediana_de_medianas']=df['mediana_de_medianas']"],"metadata":{"id":"6J8b22BSjGuJ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1730061959779,"user_tz":180,"elapsed":392,"user":{"displayName":"Enrique Gauto Sand","userId":"16871957759988522994"}},"outputId":"d8f57596-1278-4d43-e1cc-ac150f91afe5"},"execution_count":44,"outputs":[{"output_type":"stream","name":"stdout","text":["     Número de vistas de página  Usuarios nuevos  Usuarios  \\\n","0                          38.0             23.0      23.0   \n","1                          35.0             22.0      23.0   \n","2                          46.0             16.0      21.0   \n","3                          32.0             10.0      13.0   \n","4                          15.0              9.0      10.0   \n","..                          ...              ...       ...   \n","550                        27.0              5.0      11.0   \n","551                        19.0              6.0      14.0   \n","552                        12.0              2.0       4.0   \n","553                        23.0              3.0      10.0   \n","554                        18.0              6.0       8.0   \n","\n","     Número de sesiones por usuario  Sesiones  Argentina  Otros Paises  \\\n","0                          1.173913      27.0       37.0           1.0   \n","1                          1.043478      24.0       33.0           2.0   \n","2                          1.142857      24.0       41.0           5.0   \n","3                          1.076923      14.0       26.0           6.0   \n","4                          1.000000      10.0       14.0           1.0   \n","..                              ...       ...        ...           ...   \n","550                        1.888889      17.0       24.0           3.0   \n","551                        1.272727      14.0       15.0           4.0   \n","552                        1.750000       7.0       11.0           1.0   \n","553                        2.125000      17.0       21.0           2.0   \n","554                        1.250000      10.0       14.0           4.0   \n","\n","     mobile  desktop  tablet  ...  rolling_median_6  rolling_median_12  \\\n","0      30.0      8.0     0.0  ...          30.91042          30.597967   \n","1      21.0     14.0     0.0  ...          30.91042          30.597967   \n","2      37.0      9.0     0.0  ...          30.91042          30.597967   \n","3      20.0     12.0     0.0  ...          30.91042          30.597967   \n","4       8.0      7.0     0.0  ...          30.91042          30.597967   \n","..      ...      ...     ...  ...               ...                ...   \n","550    22.0      5.0     0.0  ...          20.50000          21.500000   \n","551     8.0     11.0     0.0  ...          18.00000          19.000000   \n","552     6.0      5.0     1.0  ...          16.00000          18.000000   \n","553    20.0      3.0     0.0  ...          18.00000          18.000000   \n","554    12.0      6.0     0.0  ...          18.50000          18.500000   \n","\n","     rolling_median_18  rolling_median_30  rolling_median_48  \\\n","0            30.771028          30.433078           30.19802   \n","1            30.771028          30.433078           30.19802   \n","2            30.771028          30.433078           30.19802   \n","3            30.771028          30.433078           30.19802   \n","4            30.771028          30.433078           30.19802   \n","..                 ...                ...                ...   \n","550          18.000000          24.500000           31.50000   \n","551          19.000000          24.000000           29.00000   \n","552          19.000000          21.500000           28.50000   \n","553          21.000000          21.000000           27.50000   \n","554          19.000000          19.000000           27.00000   \n","\n","     rolling_median_78  rolling_median_126  rolling_median_203  \\\n","0            30.176842           28.606557               26.22   \n","1            30.176842           28.606557               26.22   \n","2            30.176842           28.606557               26.22   \n","3            30.176842           28.606557               26.22   \n","4            30.176842           28.606557               26.22   \n","..                 ...                 ...                 ...   \n","550          37.000000           43.000000               44.00   \n","551          36.000000           42.000000               44.00   \n","552          34.500000           42.000000               44.00   \n","553          34.500000           42.000000               44.00   \n","554          34.000000           42.000000               43.00   \n","\n","     rolling_median_329  mediana_de_medianas  \n","0             25.089286             30.19802  \n","1             25.089286             30.19802  \n","2             25.089286             30.19802  \n","3             25.089286             30.19802  \n","4             25.089286             30.19802  \n","..                  ...                  ...  \n","550           37.000000             31.50000  \n","551           37.000000             29.00000  \n","552           37.000000             28.50000  \n","553           37.000000             27.50000  \n","554           37.000000             27.00000  \n","\n","[552 rows x 38 columns]\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-44-8847db652abb>:15: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df[col].fillna(df[col].mean(), inplace=True)\n"]}]},{"cell_type":"code","source":["#agregar lagged datapints\n","#df=deepcopy(dataset)\n","columna='Número de vistas de página'\n","lags=[int(3*30), int(30*6), int(30*9), int(30*12)]\n","for lag in lags:\n","    dataset[f'lag_{lag}'] = dataset[columna].shift(lag)\n","#dataset=dataset[[f'lag_{lag}' for lag in lags]]\n","# Reemplazar los NaNs en las columnas de medianas móviles con la media de cada columna\n","for lag in lags:\n","    col = f'lag_{lag}'\n","    dataset[col].fillna(dataset[col].mean(), inplace=True)\n","    '''The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","    For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","    '''\n","ver=dataset[[f'lag_{lag}' for lag in lags]]\n","ver"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":573},"id":"4bOo95xqAxiO","executionInfo":{"status":"ok","timestamp":1730062000321,"user_tz":180,"elapsed":413,"user":{"displayName":"Enrique Gauto Sand","userId":"16871957759988522994"}},"outputId":"599e12fd-7c3f-40e4-a04c-228d7eb52f76"},"execution_count":45,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-45-261476a2b0dd>:11: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  dataset[col].fillna(dataset[col].mean(), inplace=True)\n"]},{"output_type":"execute_result","data":{"text/plain":["         lag_90    lag_180    lag_270    lag_360\n","0     31.935064  26.653225  19.886524  23.640625\n","1     31.935064  26.653225  19.886524  23.640625\n","2     31.935064  26.653225  19.886524  23.640625\n","3     31.935064  26.653225  19.886524  23.640625\n","4     31.935064  26.653225  19.886524  23.640625\n","..          ...        ...        ...        ...\n","550   92.000000  37.000000   5.000000   3.000000\n","551   59.000000  52.000000  10.000000   2.000000\n","552  102.000000  60.000000  14.000000   4.000000\n","553   40.000000  38.000000   9.000000   3.000000\n","554   49.000000  18.000000  18.000000   3.000000\n","\n","[552 rows x 4 columns]"],"text/html":["\n","  <div id=\"df-35ff3977-6e37-44a8-93a0-0a877552cd38\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>lag_90</th>\n","      <th>lag_180</th>\n","      <th>lag_270</th>\n","      <th>lag_360</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>31.935064</td>\n","      <td>26.653225</td>\n","      <td>19.886524</td>\n","      <td>23.640625</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>31.935064</td>\n","      <td>26.653225</td>\n","      <td>19.886524</td>\n","      <td>23.640625</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>31.935064</td>\n","      <td>26.653225</td>\n","      <td>19.886524</td>\n","      <td>23.640625</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>31.935064</td>\n","      <td>26.653225</td>\n","      <td>19.886524</td>\n","      <td>23.640625</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>31.935064</td>\n","      <td>26.653225</td>\n","      <td>19.886524</td>\n","      <td>23.640625</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>550</th>\n","      <td>92.000000</td>\n","      <td>37.000000</td>\n","      <td>5.000000</td>\n","      <td>3.000000</td>\n","    </tr>\n","    <tr>\n","      <th>551</th>\n","      <td>59.000000</td>\n","      <td>52.000000</td>\n","      <td>10.000000</td>\n","      <td>2.000000</td>\n","    </tr>\n","    <tr>\n","      <th>552</th>\n","      <td>102.000000</td>\n","      <td>60.000000</td>\n","      <td>14.000000</td>\n","      <td>4.000000</td>\n","    </tr>\n","    <tr>\n","      <th>553</th>\n","      <td>40.000000</td>\n","      <td>38.000000</td>\n","      <td>9.000000</td>\n","      <td>3.000000</td>\n","    </tr>\n","    <tr>\n","      <th>554</th>\n","      <td>49.000000</td>\n","      <td>18.000000</td>\n","      <td>18.000000</td>\n","      <td>3.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>552 rows × 4 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-35ff3977-6e37-44a8-93a0-0a877552cd38')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-35ff3977-6e37-44a8-93a0-0a877552cd38 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-35ff3977-6e37-44a8-93a0-0a877552cd38');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-5a9e00c6-a899-4abd-a85e-2a4c8db1f16c\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5a9e00c6-a899-4abd-a85e-2a4c8db1f16c')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-5a9e00c6-a899-4abd-a85e-2a4c8db1f16c button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_e094a030-902e-4809-8330-e42bd65b64a7\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('ver')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_e094a030-902e-4809-8330-e42bd65b64a7 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('ver');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"ver","summary":"{\n  \"name\": \"ver\",\n  \"rows\": 552,\n  \"fields\": [\n    {\n      \"column\": \"lag_90\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 103,\n        \"samples\": [\n          36.0,\n          58.0,\n          11.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"lag_180\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 86,\n        \"samples\": [\n          105.0,\n          26.65322494506836,\n          87.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"lag_270\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 66,\n        \"samples\": [\n          29.0,\n          11.0,\n          19.886524200439453\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"lag_360\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 64,\n        \"samples\": [\n          54.0,\n          27.0,\n          23.640625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":45}]},{"cell_type":"code","source":["print('algun nan\\n',dataset.isnull().any(),'\\n')\n","#print('algun nan',dataset.isnull().values.any(),'\\n')\n","#nan_index = np.where(dataset.isnull().values.any())\n","\n","#nan_index2 = np.where(dataset['Predictor Flag'].isnull())\n","#nan_row=dataset.iloc[nan_index2]\n","#nan_row\n","\n","nan_index = np.where(np.atleast_1d(dataset.isnull().values.any()))\n","\n","#np.where() devuelve una tupla de arrays, por lo que puedes acceder al primer elemento\n","# que contendrá los índices de los valores nan, si los hay\n","dataset=dataset.dropna()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0kss6QwG6dqB","executionInfo":{"status":"ok","timestamp":1730062011378,"user_tz":180,"elapsed":329,"user":{"displayName":"Enrique Gauto Sand","userId":"16871957759988522994"}},"outputId":"22d83877-430a-4648-d978-4c816a3b1847"},"execution_count":46,"outputs":[{"output_type":"stream","name":"stdout","text":["algun nan\n"," Número de vistas de página                       False\n","Usuarios nuevos                                  False\n","Usuarios                                         False\n","Número de sesiones por usuario                   False\n","Sesiones                                         False\n","Argentina                                        False\n","Otros Paises                                     False\n","mobile                                           False\n","desktop                                          False\n","tablet                                           False\n","Categoría de dispositivo promedio                False\n","Categoría de dispositivo std                     False\n","Android                                          False\n","Windows                                          False\n","iOS                                              False\n","Macintosh                                        False\n","Linux                                            False\n","Tizen                                            False\n","Windows Phone                                    False\n","Sistema operativo (not set)                      False\n","Sistema operativo promedio                       False\n","Sistema operativo std                            False\n","Organic Search                                   False\n","Direct                                           False\n","Socials                                          False\n","Referral                                         False\n","Agrupación de canales predeterminada promedio    False\n","Agrupación de canales predeterminada std         False\n","Fecha                                            False\n","mediana_de_medianas                              False\n","lag_90                                           False\n","lag_180                                          False\n","lag_270                                          False\n","lag_360                                          False\n","dtype: bool \n","\n"]}]},{"cell_type":"code","source":["dataset.columns"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xdPx3I5H6_eV","executionInfo":{"status":"ok","timestamp":1730062265575,"user_tz":180,"elapsed":406,"user":{"displayName":"Enrique Gauto Sand","userId":"16871957759988522994"}},"outputId":"c98aff90-0549-4450-dab6-50158e50f6df"},"execution_count":48,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['Número de vistas de página', 'Usuarios nuevos', 'Usuarios',\n","       'Número de sesiones por usuario', 'Sesiones', 'Argentina',\n","       'Otros Paises', 'mobile', 'desktop', 'tablet',\n","       'Categoría de dispositivo promedio', 'Categoría de dispositivo std',\n","       'Android', 'Windows', 'iOS', 'Macintosh', 'Linux', 'Tizen',\n","       'Windows Phone', 'Sistema operativo (not set)',\n","       'Sistema operativo promedio', 'Sistema operativo std', 'Organic Search',\n","       'Direct', 'Socials', 'Referral',\n","       'Agrupación de canales predeterminada promedio',\n","       'Agrupación de canales predeterminada std', 'Fecha',\n","       'mediana_de_medianas', 'lag_90', 'lag_180', 'lag_270', 'lag_360'],\n","      dtype='object')"]},"metadata":{},"execution_count":48}]},{"cell_type":"code","source":["#comparar ambos dataset el de tum transmedia UA y el de GA4"],"metadata":{"id":"ayyxFdPru4Zl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# agregar medianas\n","dataset['Chrome OS']=0\n","# Renombrar la columna 'Socials' a 'Social'\n","dataset.rename(columns={'Socials': 'Social'}, inplace=True)\n","dataset['mediana Dispositivos'] = dataset[['mobile', 'desktop', 'tablet']].median(axis=1)\n","dataset['mediana Sistema operativo'] = dataset[['Windows', 'Android', 'Linux',\n","       'Macintosh', 'Sistema operativo (not set)', 'iOS', 'Windows Phone',\n","       'Chrome OS', 'Tizen']].median(axis=1)\n","dataset['mediana Agrupación de canales predeterminada'] = dataset[['Organic Search', 'Social', 'Direct',\n","       'Referral']].median(axis=1)"],"metadata":{"id":"M2w8Q_k4BHbQ","executionInfo":{"status":"ok","timestamp":1730062521619,"user_tz":180,"elapsed":386,"user":{"displayName":"Enrique Gauto Sand","userId":"16871957759988522994"}}},"execution_count":51,"outputs":[]},{"cell_type":"code","source":["dataset.drop([\"Fecha\"], inplace=True, axis=1)\n","\n","print(dataset.columns)\n","print(dataset.shape)\n","dfPrueba=deepcopy(dataset)\n","dfPrueba=dfPrueba.loc[:, ('Número de vistas de página', 'Usuarios nuevos', 'Usuarios',\n","       'Número de sesiones por usuario', 'Sesiones', 'Argentina',\n","       'Otros Paises', 'mobile', 'desktop', 'tablet',\n","       'Categoría de dispositivo promedio', 'Categoría de dispositivo std',\n","       'Windows', 'Android', 'Linux', 'Macintosh',\n","       'Sistema operativo (not set)', 'iOS', 'Windows Phone', 'Chrome OS',\n","       'Tizen', 'Sistema operativo promedio', 'Sistema operativo std',\n","       'Organic Search', 'Social', 'Direct', 'Referral',\n","       'Agrupación de canales predeterminada promedio',\n","       'Agrupación de canales predeterminada std', 'mediana_de_medianas',\n","       'lag_90', 'lag_180', 'lag_270', 'lag_360', 'mediana Dispositivos',\n","       'mediana Sistema operativo',\n","       'mediana Agrupación de canales predeterminada') ]\n","dataset=dfPrueba\n","dataset.columns"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"o5VvAgdgAFZ2","executionInfo":{"status":"ok","timestamp":1730062559330,"user_tz":180,"elapsed":358,"user":{"displayName":"Enrique Gauto Sand","userId":"16871957759988522994"}},"outputId":"d78cfd68-dba2-445a-f508-48e94f3e4a99"},"execution_count":52,"outputs":[{"output_type":"stream","name":"stdout","text":["Index(['Número de vistas de página', 'Usuarios nuevos', 'Usuarios',\n","       'Número de sesiones por usuario', 'Sesiones', 'Argentina',\n","       'Otros Paises', 'mobile', 'desktop', 'tablet',\n","       'Categoría de dispositivo promedio', 'Categoría de dispositivo std',\n","       'Android', 'Windows', 'iOS', 'Macintosh', 'Linux', 'Tizen',\n","       'Windows Phone', 'Sistema operativo (not set)',\n","       'Sistema operativo promedio', 'Sistema operativo std', 'Organic Search',\n","       'Direct', 'Social', 'Referral',\n","       'Agrupación de canales predeterminada promedio',\n","       'Agrupación de canales predeterminada std', 'mediana_de_medianas',\n","       'lag_90', 'lag_180', 'lag_270', 'lag_360', 'Chrome OS',\n","       'mediana Dispositivos', 'mediana Sistema operativo',\n","       'mediana Agrupación de canales predeterminada'],\n","      dtype='object')\n","(552, 37)\n"]},{"output_type":"execute_result","data":{"text/plain":["Index(['Número de vistas de página', 'Usuarios nuevos', 'Usuarios',\n","       'Número de sesiones por usuario', 'Sesiones', 'Argentina',\n","       'Otros Paises', 'mobile', 'desktop', 'tablet',\n","       'Categoría de dispositivo promedio', 'Categoría de dispositivo std',\n","       'Windows', 'Android', 'Linux', 'Macintosh',\n","       'Sistema operativo (not set)', 'iOS', 'Windows Phone', 'Chrome OS',\n","       'Tizen', 'Sistema operativo promedio', 'Sistema operativo std',\n","       'Organic Search', 'Social', 'Direct', 'Referral',\n","       'Agrupación de canales predeterminada promedio',\n","       'Agrupación de canales predeterminada std', 'mediana_de_medianas',\n","       'lag_90', 'lag_180', 'lag_270', 'lag_360', 'mediana Dispositivos',\n","       'mediana Sistema operativo',\n","       'mediana Agrupación de canales predeterminada'],\n","      dtype='object')"]},"metadata":{},"execution_count":52}]},{"cell_type":"code","source":["\n","print(dataset)\n","salidaCarpeta=\"/content/drive/MyDrive/a Tesis de Grado/Tesis Versiones/tesis 2024/GA4/tum transmedia/preprocesamiento/outlier/salidaCSV\"\n","NombreArchivoCSV=\"/salidaKNN2024TUMGA4Octubre.csv\"\n","dataset.to_csv(salidaCarpeta + NombreArchivoCSV)\n","print(dataset.columns)\n","print(len(dataset.columns))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OQU30rGD4P13","executionInfo":{"status":"ok","timestamp":1730062607836,"user_tz":180,"elapsed":479,"user":{"displayName":"Enrique Gauto Sand","userId":"16871957759988522994"}},"outputId":"4a4f8f52-a8ab-47ec-b6d2-c96ae14f0eb9"},"execution_count":53,"outputs":[{"output_type":"stream","name":"stdout","text":["     Número de vistas de página  Usuarios nuevos  Usuarios  \\\n","0                          38.0             23.0      23.0   \n","1                          35.0             22.0      23.0   \n","2                          46.0             16.0      21.0   \n","3                          32.0             10.0      13.0   \n","4                          15.0              9.0      10.0   \n","..                          ...              ...       ...   \n","550                        27.0              5.0      11.0   \n","551                        19.0              6.0      14.0   \n","552                        12.0              2.0       4.0   \n","553                        23.0              3.0      10.0   \n","554                        18.0              6.0       8.0   \n","\n","     Número de sesiones por usuario  Sesiones  Argentina  Otros Paises  \\\n","0                          1.173913      27.0       37.0           1.0   \n","1                          1.043478      24.0       33.0           2.0   \n","2                          1.142857      24.0       41.0           5.0   \n","3                          1.076923      14.0       26.0           6.0   \n","4                          1.000000      10.0       14.0           1.0   \n","..                              ...       ...        ...           ...   \n","550                        1.888889      17.0       24.0           3.0   \n","551                        1.272727      14.0       15.0           4.0   \n","552                        1.750000       7.0       11.0           1.0   \n","553                        2.125000      17.0       21.0           2.0   \n","554                        1.250000      10.0       14.0           4.0   \n","\n","     mobile  desktop  tablet  ...  \\\n","0      30.0      8.0     0.0  ...   \n","1      21.0     14.0     0.0  ...   \n","2      37.0      9.0     0.0  ...   \n","3      20.0     12.0     0.0  ...   \n","4       8.0      7.0     0.0  ...   \n","..      ...      ...     ...  ...   \n","550    22.0      5.0     0.0  ...   \n","551     8.0     11.0     0.0  ...   \n","552     6.0      5.0     1.0  ...   \n","553    20.0      3.0     0.0  ...   \n","554    12.0      6.0     0.0  ...   \n","\n","     Agrupación de canales predeterminada promedio  \\\n","0                                             9.50   \n","1                                             8.75   \n","2                                            11.50   \n","3                                             8.00   \n","4                                             3.75   \n","..                                             ...   \n","550                                           6.75   \n","551                                           4.75   \n","552                                           3.00   \n","553                                           5.75   \n","554                                           4.50   \n","\n","     Agrupación de canales predeterminada std  mediana_de_medianas  \\\n","0                                    7.664855             30.19802   \n","1                                   10.425330             30.19802   \n","2                                    7.826238             30.19802   \n","3                                    9.027735             30.19802   \n","4                                    3.897114             30.19802   \n","..                                        ...                  ...   \n","550                                  7.562242             31.50000   \n","551                                  6.609652             29.00000   \n","552                                  3.082207             28.50000   \n","553                                  4.918079             27.50000   \n","554                                  4.387482             27.00000   \n","\n","         lag_90    lag_180    lag_270    lag_360  mediana Dispositivos  \\\n","0     31.935064  26.653225  19.886524  23.640625                   8.0   \n","1     31.935064  26.653225  19.886524  23.640625                  14.0   \n","2     31.935064  26.653225  19.886524  23.640625                   9.0   \n","3     31.935064  26.653225  19.886524  23.640625                  12.0   \n","4     31.935064  26.653225  19.886524  23.640625                   7.0   \n","..          ...        ...        ...        ...                   ...   \n","550   92.000000  37.000000   5.000000   3.000000                   5.0   \n","551   59.000000  52.000000  10.000000   2.000000                   8.0   \n","552  102.000000  60.000000  14.000000   4.000000                   5.0   \n","553   40.000000  38.000000   9.000000   3.000000                   3.0   \n","554   49.000000  18.000000  18.000000   3.000000                   6.0   \n","\n","     mediana Sistema operativo  mediana Agrupación de canales predeterminada  \n","0                          0.0                                           9.0  \n","1                          0.0                                           4.5  \n","2                          0.0                                          12.0  \n","3                          0.0                                           4.5  \n","4                          0.0                                           3.0  \n","..                         ...                                           ...  \n","550                        0.0                                           4.0  \n","551                        0.0                                           1.5  \n","552                        0.0                                           2.5  \n","553                        0.0                                           5.5  \n","554                        1.0                                           3.5  \n","\n","[552 rows x 37 columns]\n","Index(['Número de vistas de página', 'Usuarios nuevos', 'Usuarios',\n","       'Número de sesiones por usuario', 'Sesiones', 'Argentina',\n","       'Otros Paises', 'mobile', 'desktop', 'tablet',\n","       'Categoría de dispositivo promedio', 'Categoría de dispositivo std',\n","       'Windows', 'Android', 'Linux', 'Macintosh',\n","       'Sistema operativo (not set)', 'iOS', 'Windows Phone', 'Chrome OS',\n","       'Tizen', 'Sistema operativo promedio', 'Sistema operativo std',\n","       'Organic Search', 'Social', 'Direct', 'Referral',\n","       'Agrupación de canales predeterminada promedio',\n","       'Agrupación de canales predeterminada std', 'mediana_de_medianas',\n","       'lag_90', 'lag_180', 'lag_270', 'lag_360', 'mediana Dispositivos',\n","       'mediana Sistema operativo',\n","       'mediana Agrupación de canales predeterminada'],\n","      dtype='object')\n","37\n"]}]},{"cell_type":"code","source":["#You can see the disk information using a command like !df -h.\n","#To see CPU specs, !cat /proc/cpuinfo.\n","#For memory, !cat /proc/meminfo.\n","!df -h"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"onASpT3BveCx","executionInfo":{"status":"ok","timestamp":1730062671606,"user_tz":180,"elapsed":719,"user":{"displayName":"Enrique Gauto Sand","userId":"16871957759988522994"}},"outputId":"521ec0e0-7260-4f6b-a5f3-0be80a4ec23a"},"execution_count":54,"outputs":[{"output_type":"stream","name":"stdout","text":["Filesystem      Size  Used Avail Use% Mounted on\n","overlay         226G   33G  194G  15% /\n","tmpfs            64M     0   64M   0% /dev\n","shm             5.8G     0  5.8G   0% /dev/shm\n","/dev/root       2.0G  1.2G  820M  59% /usr/sbin/docker-init\n","tmpfs           6.4G  2.7M  6.4G   1% /var/colab\n","/dev/sda1       233G   57G  176G  25% /etc/hosts\n","tmpfs           6.4G     0  6.4G   0% /proc/acpi\n","tmpfs           6.4G     0  6.4G   0% /proc/scsi\n","tmpfs           6.4G     0  6.4G   0% /sys/firmware\n","drive           100G   61G   40G  61% /content/drive\n"]}]},{"cell_type":"code","source":["!cat /proc/cpuinfo"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GBED-xbTvezx","executionInfo":{"status":"ok","timestamp":1730062671984,"user_tz":180,"elapsed":15,"user":{"displayName":"Enrique Gauto Sand","userId":"16871957759988522994"}},"outputId":"b509d8b7-4d9f-4ef2-fac9-aa549729fb93"},"execution_count":55,"outputs":[{"output_type":"stream","name":"stdout","text":["processor\t: 0\n","vendor_id\t: GenuineIntel\n","cpu family\t: 6\n","model\t\t: 79\n","model name\t: Intel(R) Xeon(R) CPU @ 2.20GHz\n","stepping\t: 0\n","microcode\t: 0xffffffff\n","cpu MHz\t\t: 2200.192\n","cache size\t: 56320 KB\n","physical id\t: 0\n","siblings\t: 2\n","core id\t\t: 0\n","cpu cores\t: 1\n","apicid\t\t: 0\n","initial apicid\t: 0\n","fpu\t\t: yes\n","fpu_exception\t: yes\n","cpuid level\t: 13\n","wp\t\t: yes\n","flags\t\t: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ss ht syscall nx pdpe1gb rdtscp lm constant_tsc rep_good nopl xtopology nonstop_tsc cpuid tsc_known_freq pni pclmulqdq ssse3 fma cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt aes xsave avx f16c rdrand hypervisor lahf_lm abm 3dnowprefetch invpcid_single ssbd ibrs ibpb stibp fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm rdseed adx smap xsaveopt arat md_clear arch_capabilities\n","bugs\t\t: cpu_meltdown spectre_v1 spectre_v2 spec_store_bypass l1tf mds swapgs taa mmio_stale_data retbleed bhi\n","bogomips\t: 4400.38\n","clflush size\t: 64\n","cache_alignment\t: 64\n","address sizes\t: 46 bits physical, 48 bits virtual\n","power management:\n","\n","processor\t: 1\n","vendor_id\t: GenuineIntel\n","cpu family\t: 6\n","model\t\t: 79\n","model name\t: Intel(R) Xeon(R) CPU @ 2.20GHz\n","stepping\t: 0\n","microcode\t: 0xffffffff\n","cpu MHz\t\t: 2200.192\n","cache size\t: 56320 KB\n","physical id\t: 0\n","siblings\t: 2\n","core id\t\t: 0\n","cpu cores\t: 1\n","apicid\t\t: 1\n","initial apicid\t: 1\n","fpu\t\t: yes\n","fpu_exception\t: yes\n","cpuid level\t: 13\n","wp\t\t: yes\n","flags\t\t: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ss ht syscall nx pdpe1gb rdtscp lm constant_tsc rep_good nopl xtopology nonstop_tsc cpuid tsc_known_freq pni pclmulqdq ssse3 fma cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt aes xsave avx f16c rdrand hypervisor lahf_lm abm 3dnowprefetch invpcid_single ssbd ibrs ibpb stibp fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm rdseed adx smap xsaveopt arat md_clear arch_capabilities\n","bugs\t\t: cpu_meltdown spectre_v1 spectre_v2 spec_store_bypass l1tf mds swapgs taa mmio_stale_data retbleed bhi\n","bogomips\t: 4400.38\n","clflush size\t: 64\n","cache_alignment\t: 64\n","address sizes\t: 46 bits physical, 48 bits virtual\n","power management:\n","\n"]}]},{"cell_type":"code","source":["!cat /proc/meminfo"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cnsMDJbXviOi","executionInfo":{"status":"ok","timestamp":1730062672469,"user_tz":180,"elapsed":15,"user":{"displayName":"Enrique Gauto Sand","userId":"16871957759988522994"}},"outputId":"cbdfc98a-1343-4c31-94cf-cbd204f87a78"},"execution_count":56,"outputs":[{"output_type":"stream","name":"stdout","text":["MemTotal:       13290460 kB\n","MemFree:         6004248 kB\n","MemAvailable:   11127920 kB\n","Buffers:          478056 kB\n","Cached:          4775980 kB\n","SwapCached:            0 kB\n","Active:           869400 kB\n","Inactive:        6037112 kB\n","Active(anon):       2184 kB\n","Inactive(anon):  1654584 kB\n","Active(file):     867216 kB\n","Inactive(file):  4382528 kB\n","Unevictable:          20 kB\n","Mlocked:              20 kB\n","SwapTotal:             0 kB\n","SwapFree:              0 kB\n","Dirty:               560 kB\n","Writeback:             0 kB\n","AnonPages:       1652560 kB\n","Mapped:           736840 kB\n","Shmem:              4280 kB\n","KReclaimable:     199332 kB\n","Slab:             246944 kB\n","SReclaimable:     199332 kB\n","SUnreclaim:        47612 kB\n","KernelStack:        7328 kB\n","PageTables:        33300 kB\n","SecPageTables:         0 kB\n","NFS_Unstable:          0 kB\n","Bounce:                0 kB\n","WritebackTmp:          0 kB\n","CommitLimit:     6645228 kB\n","Committed_AS:    4122884 kB\n","VmallocTotal:   34359738367 kB\n","VmallocUsed:       13672 kB\n","VmallocChunk:          0 kB\n","Percpu:             1120 kB\n","HardwareCorrupted:     0 kB\n","AnonHugePages:         0 kB\n","ShmemHugePages:        0 kB\n","ShmemPmdMapped:        0 kB\n","FileHugePages:         0 kB\n","FilePmdMapped:         0 kB\n","CmaTotal:              0 kB\n","CmaFree:               0 kB\n","Unaccepted:            0 kB\n","HugePages_Total:       0\n","HugePages_Free:        0\n","HugePages_Rsvd:        0\n","HugePages_Surp:        0\n","Hugepagesize:       2048 kB\n","Hugetlb:               0 kB\n","DirectMap4k:       74552 kB\n","DirectMap2M:     5165056 kB\n","DirectMap1G:    10485760 kB\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"2nVF3ps4CcxN","executionInfo":{"status":"ok","timestamp":1730062673657,"user_tz":180,"elapsed":7,"user":{"displayName":"Enrique Gauto Sand","userId":"16871957759988522994"}}},"execution_count":56,"outputs":[]}],"metadata":{"colab":{"provenance":[],"mount_file_id":"1hY27r8KHPAk4ZWqf0755rJADf2HXVSKo","authorship_tag":"ABX9TyONp8/ySqfGTXAgjLd1StK0"},"gpuClass":"standard","kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}